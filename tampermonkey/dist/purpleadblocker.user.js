// ==UserScript==
// @name         Purple Adblocker
// @source       https://github.com/arthurbolsoni/Purple-adblock
// @version      2.5.1
// @description  Per aspera ad astra
// @author       ArthurBolzoni
// @downloadURL  https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/tampermonkey/dist/purpleadblocker.user.js
// @updateURL    https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/tampermonkey/dist/purpleadblocker.user.js
// @match        *://*.twitch.tv/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
//this line gonna import the content from compile worker as string
//@ts-expect-error
const app_worker_js_1 = __importDefault(__webpack_require__(/*! ../dist/app.worker.js */ "./dist/app.worker.js"));
(function () {
    let mainWorker;
    window.Worker = class WorkerInjector extends Worker {
        constructor(twitchBlobUrl) {
            console.log("new worker intance " + twitchBlobUrl);
            if (twitchBlobUrl == "")
                super(twitchBlobUrl);
            console.log("[Purple]: init " + twitchBlobUrl);
            const newBlobStr = `${app_worker_js_1.default}
      importScripts('${twitchBlobUrl}');`;
            super(URL.createObjectURL(new Blob([newBlobStr], { type: "text/javascript" })));
            mainWorker = this;
            mainWorker.declareEventWorker();
            mainWorker.declareEventWindow();
        }
        declareEventWorker() {
            this.addEventListener("message", (event) => {
                // if (typeof (event.data.type) !== "string") console.log(event.data.arg);
                // if (typeof (event.data.type) !== "string") console.log(event.data);
                switch (event.data.type) {
                    case "getSettings": {
                        window.postMessage({ type: "getSettings", value: null });
                        break;
                    }
                    case "PlayerQualityChanged": {
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.name });
                        break;
                    }
                    case "pause": {
                        mainWorker.postMessage({ funcName: "pause", args: undefined, id: 1 });
                        break;
                    }
                    case "play": {
                        mainWorker.postMessage({ funcName: "play", args: undefined, id: 1 });
                        break;
                    }
                    default: {
                        break;
                    }
                }
                if (!event.data.arg)
                    return;
                switch (event.data.arg.key) {
                    case "quality": {
                        if (!event.data.arg.value.name)
                            break;
                        console.log("Changed quality by player: " + event.data.arg.value.name);
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.value.name });
                        break;
                    }
                    case "state": {
                        mainWorker.postMessage({ funcName: event.data.arg.value });
                    }
                    default: {
                        break;
                    }
                }
                switch (event.data.arg.name) {
                    case "pause": {
                        break;
                    }
                    case "play": {
                        break;
                    }
                    default: {
                        break;
                    }
                }
            });
        }
        declareEventWindow() {
            //Event listener from window and extension.
            window.addEventListener("message", (event) => {
                switch (event.data.type) {
                    case "setSettings": {
                        //send settings to worker
                        mainWorker.postMessage({ funcName: "setSettings", value: event.data.value });
                    }
                }
            });
        }
    };
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRUFBa0U7QUFDbEUsa0JBQWtCO0FBQ2xCLDBFQUF3QztBQUV4QyxDQUFDO0lBQ0MsSUFBSSxVQUFlLENBQUM7SUFFcEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLGNBQWUsU0FBUSxNQUFNO1FBQ2pELFlBQVksYUFBa0I7WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUMsQ0FBQztZQUVuRCxJQUFJLGFBQWEsSUFBSSxFQUFFO2dCQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxDQUFDO1lBRS9DLE1BQU0sVUFBVSxHQUFHLEdBQUcsdUJBQUc7dUJBQ1IsYUFBYSxLQUFLLENBQUM7WUFFcEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDbEIsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbEMsQ0FBQztRQUVELGtCQUFrQjtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pDLDBFQUEwRTtnQkFDMUUsc0VBQXNFO2dCQUV0RSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUN2QixLQUFLLGFBQWEsQ0FBQyxDQUFDO3dCQUNsQixNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFDekQsTUFBTTtxQkFDUDtvQkFDRCxLQUFLLHNCQUFzQixDQUFDLENBQUM7d0JBQzNCLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO3dCQUMvRSxNQUFNO3FCQUNQO29CQUNELEtBQUssT0FBTyxDQUFDLENBQUM7d0JBQ1osVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDdEUsTUFBTTtxQkFDUDtvQkFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO3dCQUNYLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQ3JFLE1BQU07cUJBQ1A7b0JBQ0QsT0FBTyxDQUFDLENBQUM7d0JBQ1AsTUFBTTtxQkFDUDtpQkFDRjtnQkFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHO29CQUFFLE9BQU87Z0JBQzVCLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUMxQixLQUFLLFNBQVMsQ0FBQyxDQUFDO3dCQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSTs0QkFBRSxNQUFNO3dCQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDdkUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO3dCQUNyRixNQUFNO3FCQUNQO29CQUNELEtBQUssT0FBTyxDQUFDLENBQUM7d0JBQ1osVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO3FCQUM1RDtvQkFDRCxPQUFPLENBQUMsQ0FBQzt3QkFDUCxNQUFNO3FCQUNQO2lCQUNGO2dCQUVELFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO29CQUMzQixLQUFLLE9BQU8sQ0FBQyxDQUFDO3dCQUNaLE1BQU07cUJBQ1A7b0JBQ0QsS0FBSyxNQUFNLENBQUMsQ0FBQzt3QkFDWCxNQUFNO3FCQUNQO29CQUNELE9BQU8sQ0FBQyxDQUFDO3dCQUNQLE1BQU07cUJBQ1A7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxrQkFBa0I7WUFDaEIsMkNBQTJDO1lBQzNDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDM0MsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDdkIsS0FBSyxhQUFhLENBQUMsQ0FBQzt3QkFDbEIseUJBQXlCO3dCQUN6QixVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO3FCQUM5RTtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUMsRUFBRSxDQUFDIn0=

/***/ }),

/***/ "./dist/app.worker.js":
/*!****************************!*\
  !*** ./dist/app.worker.js ***!
  \****************************/
/***/ ((module) => {

module.exports = "/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/app.controller.ts\":\n/*!*******************************!*\\\n  !*** ./src/app.controller.ts ***!\n  \\*******************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.appController = void 0;\r\nconst controller_decorator_1 = __webpack_require__(/*! ./decorator/controller.decorator */ \"./src/decorator/controller.decorator.ts\");\r\nconst handler_decorator_1 = __webpack_require__(/*! ./decorator/handler.decorator */ \"./src/decorator/handler.decorator.ts\");\r\nlet appController = class appController {\r\n    constructor(appService) {\r\n        this.appService = appService;\r\n        this.getSettings = () => __webpack_require__.g.postMessage({ type: \"getSettings\" });\r\n        this.getSettings();\r\n    }\r\n    onChannel(url, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield __webpack_require__.g.realFetch(url, options);\r\n            if (!response.ok) {\r\n                console.log(\"Error on channel load\");\r\n                return response;\r\n            }\r\n            const text = yield response.text();\r\n            yield this.appService.onStartChannel(url);\r\n            return new Response(text);\r\n        });\r\n    }\r\n    onFetch(url, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const body = yield (yield realFetch(url, options)).text();\r\n            const playlist = yield this.appService.onfetch(url, body);\r\n            return new Response(playlist);\r\n        });\r\n    }\r\n    onChannelPicture(url, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Response();\r\n        });\r\n    }\r\n    setSettings(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.appService.settings = data.value;\r\n        });\r\n    }\r\n    setQuality(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.appService.quality = data.value;\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    (0, handler_decorator_1.Fetch)(\"usher.ttvnw.net/api/channel/hls/\", \"picture-by-picture\")\r\n], appController.prototype, \"onChannel\", null);\r\n__decorate([\r\n    (0, handler_decorator_1.Fetch)(\"hls.ttvnw.net/v1/playlist/\")\r\n], appController.prototype, \"onFetch\", null);\r\n__decorate([\r\n    (0, handler_decorator_1.Fetch)(\"picture-by-picture\")\r\n], appController.prototype, \"onChannelPicture\", null);\r\n__decorate([\r\n    (0, handler_decorator_1.Message)(\"setSettings\")\r\n], appController.prototype, \"setSettings\", null);\r\n__decorate([\r\n    (0, handler_decorator_1.Message)(\"setQuality\")\r\n], appController.prototype, \"setQuality\", null);\r\nappController = __decorate([\r\n    (0, controller_decorator_1.Controller)()\r\n], appController);\r\nexports.appController = appController;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXBwLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkVBQThEO0FBQzlELHFFQUErRDtBQUsvRCxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBR3hCLFlBQTZCLFVBQWtCO1FBQWxCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFGL0MsZ0JBQVcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFHOUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFHSyxTQUFTLENBQUMsR0FBVyxFQUFFLE9BQVk7O1lBQ3ZDLE1BQU0sUUFBUSxHQUFhLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDckMsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFFRCxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztLQUFBO0lBR0ssT0FBTyxDQUFDLEdBQVcsRUFBRSxPQUFZOztZQUNyQyxNQUFNLElBQUksR0FBVyxNQUFNLENBQUMsTUFBTSxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUQsT0FBTyxJQUFJLFFBQVEsQ0FBQyxRQUFlLENBQUMsQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFHSyxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsT0FBWTs7WUFDOUMsT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUM7S0FBQTtJQUdLLFdBQVcsQ0FBQyxJQUFTOztZQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hDLENBQUM7S0FBQTtJQUdLLFVBQVUsQ0FBQyxJQUFTOztZQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLENBQUM7S0FBQTtDQUNGLENBQUE7QUFqQ0M7SUFEQyxJQUFBLHlCQUFLLEVBQUMsa0NBQWtDLEVBQUUsb0JBQW9CLENBQUM7OENBVy9EO0FBR0Q7SUFEQyxJQUFBLHlCQUFLLEVBQUMsNEJBQTRCLENBQUM7NENBS25DO0FBR0Q7SUFEQyxJQUFBLHlCQUFLLEVBQUMsb0JBQW9CLENBQUM7cURBRzNCO0FBR0Q7SUFEQyxJQUFBLDJCQUFPLEVBQUMsYUFBYSxDQUFDO2dEQUd0QjtBQUdEO0lBREMsSUFBQSwyQkFBTyxFQUFDLFlBQVksQ0FBQzsrQ0FHckI7QUF4Q1UsYUFBYTtJQUR6QixJQUFBLGlDQUFVLEdBQUU7R0FDQSxhQUFhLENBeUN6QjtBQXpDWSxzQ0FBYSJ9\n\n/***/ }),\n\n/***/ \"./src/app.worker.ts\":\n/*!***************************!*\\\n  !*** ./src/app.worker.ts ***!\n  \\***************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst app_controller_1 = __webpack_require__(/*! ./app.controller */ \"./src/app.controller.ts\");\r\nconst player_1 = __webpack_require__(/*! ./modules/player/player */ \"./src/modules/player/player.ts\");\r\nfunction app() {\r\n    __webpack_require__.g.LogPrint = (x) => console.log(\"[Purple]: \", x);\r\n    __webpack_require__.g.appController = new app_controller_1.appController(new player_1.Player());\r\n    __webpack_require__.g.LogPrint(\"Script running\");\r\n}\r\nexports[\"default\"] = app;\r\n__webpack_require__.g.realFetch = __webpack_require__.g.fetch;\r\n__webpack_require__.g.fetch = (url, options) => __awaiter(void 0, void 0, void 0, function* () {\r\n    if (typeof url === \"string\") {\r\n        for (var i = 0, len = routerList.length; i < len; i++) {\r\n            if (url.includes(routerList[i].match) && !url.includes(routerList[i].ignore)) {\r\n                return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () { return resolve(yield __webpack_require__.g.appController[routerList[i].propertyKey](url, options)); }));\r\n            }\r\n        }\r\n    }\r\n    return __webpack_require__.g.realFetch.apply(this, [url, options]);\r\n});\r\n__webpack_require__.g.addEventListener(\"message\", (e) => {\r\n    __webpack_require__.g.messageList.forEach((x) => {\r\n        if (e.data.funcName == x.match)\r\n            __webpack_require__.g.appController[x.propertyKey](e.data);\r\n    });\r\n});\r\napp();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAud29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEscURBQWlEO0FBQ2pELG9EQUFpRDtBQVdqRCxTQUF3QixHQUFHO0lBQ3pCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSw4QkFBYSxDQUFDLElBQUksZUFBTSxFQUFFLENBQUMsQ0FBQztJQUV2RCxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUxELHNCQUtDO0FBRUQsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBTyxHQUFRLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDOUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTyxDQUFDLEVBQUU7Z0JBQzdFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBTyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsa0RBQUMsT0FBQSxPQUFPLENBQUMsTUFBTSxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQSxHQUFBLENBQUMsQ0FBQzthQUM3SDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQSxDQUFDO0FBRUYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzVDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsS0FBSztZQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxFQUFFLENBQUMifQ==\n\n/***/ }),\n\n/***/ \"./src/decorator/controller.decorator.ts\":\n/*!***********************************************!*\\\n  !*** ./src/decorator/controller.decorator.ts ***!\n  \\***********************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Controller = void 0;\r\nconst Controller = () => {\r\n    return (target) => { };\r\n};\r\nexports.Controller = Controller;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjb3JhdG9yL2NvbnRyb2xsZXIuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLE1BQU0sVUFBVSxHQUFHLEdBQW1CLEVBQUU7SUFDN0MsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUZXLFFBQUEsVUFBVSxjQUVyQiJ9\n\n/***/ }),\n\n/***/ \"./src/decorator/handler.decorator.ts\":\n/*!********************************************!*\\\n  !*** ./src/decorator/handler.decorator.ts ***!\n  \\********************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Message = exports.Fetch = void 0;\r\nconst Fetch = (match, ignore = null) => {\r\n    return (target, propertyKey) => {\r\n        if (!__webpack_require__.g.routerList)\r\n            __webpack_require__.g.routerList = [];\r\n        __webpack_require__.g.routerList.push({ propertyKey: propertyKey, match: match, ignore: ignore });\r\n    };\r\n};\r\nexports.Fetch = Fetch;\r\nconst Message = (match) => {\r\n    return (target, propertyKey) => {\r\n        if (!__webpack_require__.g.messageList)\r\n            __webpack_require__.g.messageList = [];\r\n        __webpack_require__.g.messageList.push({ propertyKey: propertyKey, match: match });\r\n    };\r\n};\r\nexports.Message = Message;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjb3JhdG9yL2hhbmRsZXIuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBYSxFQUFFLFNBQXdCLElBQUksRUFBbUIsRUFBRTtJQUNwRixPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUFFLE1BQU0sQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQXFCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMvRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFMVyxRQUFBLEtBQUssU0FLaEI7QUFFSyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWEsRUFBbUIsRUFBRTtJQUN4RCxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVztZQUFFLE1BQU0sQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQXFCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDaEYsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBTFcsUUFBQSxPQUFPLFdBS2xCIn0=\n\n/***/ }),\n\n/***/ \"./src/modules/player/player.ts\":\n/*!**************************************!*\\\n  !*** ./src/modules/player/player.ts ***!\n  \\**************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Player = void 0;\r\nconst stream_1 = __webpack_require__(/*! ../stream/stream */ \"./src/modules/stream/stream.ts\");\r\nconst stream_type_1 = __webpack_require__(/*! ../stream/interface/stream.type */ \"./src/modules/stream/interface/stream.type.ts\");\r\nclass Player {\r\n    constructor() {\r\n        this.streamList = [];\r\n        this.actualChannel = \"\";\r\n        this.playingAds = false;\r\n        this.settings = { whitelist: [], toggleProxy: true, proxyUrl: \"\", toggleDNS: false };\r\n        this.quality = \"\";\r\n        this.getQuality = () => __webpack_require__.g.postMessage({ type: \"getQuality\" });\r\n        this.getSettings = () => __webpack_require__.g.postMessage({ type: \"getSettings\" });\r\n        this.pause = () => __webpack_require__.g.postMessage({ type: \"pause\" });\r\n        this.play = () => __webpack_require__.g.postMessage({ type: \"play\" });\r\n        this.pauseAndPlay = () => {\r\n            this.pause();\r\n            this.play();\r\n        };\r\n        this.onStartAds = () => { console.log(\"ads started\"); this.pauseAndPlay(); };\r\n        this.onEndAds = () => { console.log(\"ads ended\"); this.pauseAndPlay(); };\r\n        this.isAds = (x, allowChange = false) => {\r\n            // const ads = x.toString().includes(\"stitched-ad\") || x.toString().includes(\"twitch-client-ad\") || x.toString().includes(\"twitch-ad-quartile\");\r\n            const ads = x.toString().includes(\"stitched\");\r\n            if (!allowChange)\r\n                return ads;\r\n            if (this.playingAds == false && this.playingAds != ads)\r\n                this.onStartAds();\r\n            if (this.playingAds == true && this.playingAds != ads)\r\n                this.onEndAds();\r\n            this.playingAds = ads;\r\n            return this.playingAds;\r\n        };\r\n        this.currentStream = (channel = this.actualChannel) => {\r\n            return this.streamList.find((x) => x.channelName === channel);\r\n        };\r\n    }\r\n    isWhitelist() {\r\n        if (!this.settings.whitelist)\r\n            return false;\r\n        return this.settings.whitelist.includes(this.actualChannel) && this.currentStream() == undefined ? true : false;\r\n    }\r\n    onfetch(url, response) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentStream = this.currentStream();\r\n            // currentStream.hls.addPlaylist(response);\r\n            if (this.isWhitelist())\r\n                return response;\r\n            if (!this.isAds(response, true))\r\n                return response;\r\n            try {\r\n                const local = yield this.fetchm3u8ByStreamType(stream_type_1.streams.local);\r\n                // if (local) currentStream.hls.addPlaylist(local);\r\n                if (!local)\r\n                    currentStream.streamAccess(stream_type_1.streams.local);\r\n                if (local)\r\n                    return local;\r\n                const external = yield this.fetchm3u8ByStreamType(stream_type_1.streams.external);\r\n                // if (external) currentStream.hls.addPlaylist(external);\r\n                if (external)\r\n                    return external;\r\n                console.log(\"All stream types failed\");\r\n            }\r\n            catch (e) {\r\n                console.log(e.message);\r\n            }\r\n            return response;\r\n        });\r\n    }\r\n    fetchm3u8ByStreamType(accessType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            LogPrint(\"Stream Type: \" + accessType.name);\r\n            const streamUrlList = this.currentStream().getStreamServersByStreamType(accessType, this.quality);\r\n            //by the array order, try get m3u8 content and return if don't have ads.\r\n            for (const streamUrl of streamUrlList) {\r\n                const text = yield (yield __webpack_require__.g.realFetch(streamUrl === null || streamUrl === void 0 ? void 0 : streamUrl.url)).text();\r\n                if (this.isAds(text))\r\n                    continue;\r\n                return text;\r\n            }\r\n            return \"\";\r\n        });\r\n    }\r\n    onStartChannel(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const channelName = /hls\\/(.*).m3u8/gm.exec(url) || [];\r\n            LogPrint(\"Loading channel\", channelName[1]);\r\n            this.actualChannel = channelName[1];\r\n            const currentStream = new stream_1.Stream(this.actualChannel, this.settings.proxyUrl || \"\");\r\n            this.streamList.push(currentStream);\r\n            if (this.settings.whitelist) {\r\n                if (this.settings.whitelist.includes(this.actualChannel))\r\n                    return false;\r\n            }\r\n            this.currentStream().streamAccess(stream_type_1.streams.external);\r\n            return true;\r\n        });\r\n    }\r\n}\r\nexports.Player = Player;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvcGxheWVyL3BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBMEM7QUFDMUMsaUVBQXNFO0FBSXRFLE1BQWEsTUFBTTtJQUFuQjtRQUNFLGVBQVUsR0FBYSxFQUFFLENBQUM7UUFDMUIsa0JBQWEsR0FBVyxFQUFFLENBQUM7UUFDM0IsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixhQUFRLEdBQVksRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDekYsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUVyQixlQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzlELGdCQUFXLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLFVBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDcEQsU0FBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNsRCxpQkFBWSxHQUFHLEdBQUcsRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUM7UUFDRixlQUFVLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMs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\n\n/***/ }),\n\n/***/ \"./src/modules/stream/interface/stream.type.ts\":\n/*!*****************************************************!*\\\n  !*** ./src/modules/stream/interface/stream.type.ts ***!\n  \\*****************************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.streams = void 0;\r\nexports.streams = {\r\n    picture: { playerType: \"thunderdome\", name: \"lower\" },\r\n    local: { playerType: \"embed\", name: \"normal\" },\r\n    frontpage: { playerType: \"frontpage\", name: \"frontpage\" },\r\n    localSite: { playerType: \"site\", name: \"site\" },\r\n    external: { name: \"external\" },\r\n    dns: { name: \"dns\" },\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLnR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9zdHJlYW0vaW50ZXJmYWNlL3N0cmVhbS50eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsT0FBTyxHQUFHO0lBQ3JCLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNyRCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7SUFDOUMsU0FBUyxFQUFFLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFO0lBQ3pELFNBQVMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUMvQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQzlCLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7Q0FDckIsQ0FBQyJ9\n\n/***/ }),\n\n/***/ \"./src/modules/stream/interface/streamServer.types.ts\":\n/*!************************************************************!*\\\n  !*** ./src/modules/stream/interface/streamServer.types.ts ***!\n  \\************************************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Server = exports.qualityUrl = void 0;\r\nclass qualityUrl {\r\n    constructor() {\r\n        this.url = \"\";\r\n        this.quality = \"\";\r\n    }\r\n}\r\nexports.qualityUrl = qualityUrl;\r\nclass Server {\r\n    constructor(partial) {\r\n        this.bestQuality = () => {\r\n            return this.urlList[0];\r\n        };\r\n        this.findByQuality = (quality) => this.urlList.find((x) => x.quality == quality);\r\n        Object.assign(this, partial);\r\n    }\r\n}\r\nexports.Server = Server;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtU2VydmVyLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvc3RyZWFtL2ludGVyZmFjZS9zdHJlYW1TZXJ2ZXIudHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBYSxVQUFVO0lBQXZCO1FBQ0UsUUFBRyxHQUFXLEVBQUUsQ0FBQztRQUNqQixZQUFPLEdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FBQTtBQUhELGdDQUdDO0FBQ0QsTUFBYSxNQUFNO0lBVWpCLFlBQVksT0FBd0I7UUFMcEMsZ0JBQVcsR0FBRyxHQUFHLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUNGLGtCQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBR2xGLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQWJELHdCQWFDIn0=\n\n/***/ }),\n\n/***/ \"./src/modules/stream/stream.ts\":\n/*!**************************************!*\\\n  !*** ./src/modules/stream/stream.ts ***!\n  \\**************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Stream = void 0;\r\nconst stream_type_1 = __webpack_require__(/*! ./interface/stream.type */ \"./src/modules/stream/interface/stream.type.ts\");\r\nconst streamServer_types_1 = __webpack_require__(/*! ./interface/streamServer.types */ \"./src/modules/stream/interface/streamServer.types.ts\");\r\nclass Stream {\r\n    constructor(channelName, tunnel) {\r\n        this.serverList = [];\r\n        this.tunnelList = [\"https://eu1.jupter.ga/channel/{channelname}\"];\r\n        this.channelName = channelName;\r\n        this.currentTunnel = tunnel || this.tunnelList[0];\r\n    }\r\n    //add m3u8 links with quality to the list of servers\r\n    createServer(text, type = \"local\", sig = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const qualityUrlSplit = [];\r\n            let captureArray;\r\n            const REGEX = /NAME=\"((?:\\S+\\s+\\S+|\\S+))\",AUTO(?:^|\\S+\\s+)(?:^|\\S+\\s+)(https:\\/\\/video(\\S+).m3u8)/g;\r\n            while ((captureArray = REGEX.exec(text)) !== null) {\r\n                qualityUrlSplit.push({ quality: captureArray[1], url: captureArray[2] });\r\n            }\r\n            const streamList = new streamServer_types_1.Server({ type: type, urlList: qualityUrlSplit, sig: sig });\r\n            this.serverList.push(streamList);\r\n            // if (!sig) {\r\n            //   await this.signature();\r\n            // }\r\n            return true;\r\n        });\r\n    }\r\n    // async signature() {\r\n    //   const REGEX = /video-weaver.(.*).hls.ttvnw.net\\/v1\\/playlist\\/(.*).m3u8$/gm;\r\n    //   await new Promise((resolve) => {\r\n    //     this.serverList\r\n    //       .filter((x: any) => x.sig == false)\r\n    //       .forEach(async (x: any) => {\r\n    //         const match: RegExpExecArray | null = REGEX.exec(x.urlList[0].url);\r\n    //         if (match) {\r\n    //           try {\r\n    //             await fetch(\"https://jupter.ga/hls/v2/sig/\" + match[2] + \"/\" + match[1]);\r\n    //             x.sig = true;\r\n    //             resolve(true);\r\n    //           } catch {\r\n    //             resolve(false);\r\n    //           }\r\n    //         } else {\r\n    //           resolve(false);\r\n    //         }\r\n    //       }),\r\n    //       resolve(false);\r\n    //   });\r\n    // }\r\n    //add a new player stream external\r\n    externalRequest(customIgnore = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (customIgnore)\r\n                this.currentTunnel = this.tunnelList[0];\r\n            try {\r\n                __webpack_require__.g.LogPrint(\"External Server: Loading\");\r\n                const response = yield __webpack_require__.g.realFetch(this.currentTunnel.replace(\"{channelname}\", this.channelName));\r\n                if (!response.ok) {\r\n                    throw new Error(\"server proxy return error or not found\");\r\n                }\r\n                const text = yield response.text();\r\n                __webpack_require__.g.LogPrint(\"External Server: OK\");\r\n                this.createServer(text, stream_type_1.streams.external.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                __webpack_require__.g.LogPrint(\"server proxy return error or not found \" + this.currentTunnel);\r\n                __webpack_require__.g.LogPrint(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    //create a new stream access\r\n    streamAccess(stream) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (stream.name == stream_type_1.streams.external.name) {\r\n                if (!this.externalRequest())\r\n                    this.externalRequest(true);\r\n                return false;\r\n            }\r\n            try {\r\n                const query = {\r\n                    \"operationName\": \"PlaybackAccessToken\",\r\n                    \"variables\": {\r\n                        \"isLive\": true,\r\n                        \"login\": this.channelName,\r\n                        \"isVod\": false,\r\n                        \"vodID\": \"\",\r\n                        \"playerType\": stream.playerType\r\n                    },\r\n                    \"extensions\": {\r\n                        \"persistedQuery\": {\r\n                            \"version\": 1,\r\n                            \"sha256Hash\": \"0828119ded1c13477966434e15800ff57ddacf13ba1911c129dc2200705b0712\"\r\n                        }\r\n                    }\r\n                };\r\n                const gql = yield __webpack_require__.g.realFetch(\"https://gql.twitch.tv/gql\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Host\": \"gql.twitch.tv\", \"Client-ID\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\" },\r\n                    body: JSON.stringify(query),\r\n                });\r\n                const streamDataAccess = yield gql.json();\r\n                const url = \"https://usher.ttvnw.net/api/channel/hls/\" +\r\n                    this.channelName +\r\n                    \".m3u8?allow_source=true&fast_bread=true&p=\" +\r\n                    Math.floor(Math.random() * 1e7) +\r\n                    \"&player_backend=mediaplayer&playlist_include_framerate=true&reassignments_supported=false&sig=\" +\r\n                    streamDataAccess.data.streamPlaybackAccessToken.signature +\r\n                    \"&supported_codecs=avc1&token=\" +\r\n                    streamDataAccess.data.streamPlaybackAccessToken.value;\r\n                const text = yield (yield __webpack_require__.g.realFetch(url)).text();\r\n                __webpack_require__.g.LogPrint(\"Server loaded \" + stream.name);\r\n                this.createServer(text, stream.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    getStreamServersByStreamType(accessType, quality) {\r\n        //filter all server by type\r\n        const servers = this.serverList.filter((x) => x.type == accessType.name);\r\n        if (!servers)\r\n            return [];\r\n        //filter all server url by quality or bestquality\r\n        const streamUrlList = servers.map((x) => x.findByQuality(quality)).filter((x) => x !== undefined);\r\n        return !streamUrlList.length ? servers.map((x) => x.bestQuality()) : streamUrlList;\r\n    }\r\n}\r\nexports.Stream = Stream;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvc3RyZWFtL3N0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx5REFBOEQ7QUFDOUQsdUVBQXFFO0FBRXJFLE1BQWEsTUFBTTtJQU9qQixZQUFZLFdBQW1CLEVBQUUsTUFBZTtRQU5oRCxlQUFVLEdBQWEsRUFBRSxDQUFDO1FBT3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELG9EQUFvRDtJQUM5QyxZQUFZLENBQUMsSUFBWSxFQUFFLElBQUksR0FBRyxPQUFPLEVBQUUsR0FBRyxHQUFHLElBQUk7O1lBQ3pELE1BQU0sZUFBZSxHQUFpQixFQUFFLENBQUM7WUFDekMsSUFBSSxZQUFvQyxDQUFDO1lBRXpDLE1BQU0sS0FBSyxHQUFHLHFGQUFxRixDQUFDO1lBRXBHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDakQsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDMUU7WUFFRCxNQUFNLFVBQVUsR0FBVyxJQUFJLDJCQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFB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\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __webpack_exports__ = __webpack_require__(\"./src/app.worker.ts\");\n/******/ \t\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,