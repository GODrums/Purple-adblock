// ==UserScript==
// @name         Purple Adblocker
// @source       https://github.com/arthurbolsoni/Purple-adblock
// @version      2.5.0.4
// @description  Per aspera ad astra
// @author       ArthurBolzoni
// @downloadURL  https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/tampermonkey/dist/purpleadblocker.user.js
// @updateURL    https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/tampermonkey/dist/purpleadblocker.user.js
// @match        *://*.twitch.tv/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/app.worker.js":
/*!****************************!*\
  !*** ./dist/app.worker.js ***!
  \****************************/
/***/ ((module) => {

module.exports = "/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/hls/HLS.ts\":\n/*!************************!*\\\n  !*** ./src/hls/HLS.ts ***!\n  \\************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HLS\": () => (/* binding */ HLS)\n/* harmony export */ });\nclass HLS {\r\n    constructor() {\r\n        this._header = [\"#EXTM3U\", \"#EXT-X-VERSION:3\", \"#EXT-X-TARGETDURATION:6\", \"#EXT-X-MEDIA-SEQUENCE:\"];\r\n        this._playlist = [];\r\n        this._sequence = 0;\r\n    }\r\n    addPlaylistTest(playlist) { }\r\n    addPlaylist(playlist, allowAds = false) {\r\n        if (playlist === null) {\r\n            return false;\r\n        }\r\n        let changed = false;\r\n        const lines = playlist.toString().split(/[\\r\\n]/);\r\n        this._header[4] = lines[4];\r\n        this._header[5] = lines[5];\r\n        //take all m3u9 content to the playlist and build a varible\r\n        for (const i in lines) {\r\n            if (lines[i].includes(\"#EXTINF\")) {\r\n                if (!allowAds) {\r\n                    if (!lines[i].includes(\",live\")) {\r\n                        continue;\r\n                    }\r\n                }\r\n                //timestamp sequence\r\n                const sequenceTimestamp = Math.floor(new Date(lines[parseInt(i) - 1].slice(lines[parseInt(i) - 1].length - 24, lines[parseInt(i) - 1].length)).getTime() / 1000);\r\n                //select all sequence that no exist\r\n                const r = this._playlist.filter((x) => {\r\n                    return x.timestamp >= sequenceTimestamp;\r\n                });\r\n                //add the sequence on playlist variable if it no exist\r\n                if (!r.length) {\r\n                    this._sequence = this._sequence + 1;\r\n                    this._playlist.push({\r\n                        time: lines[parseInt(i) - 1],\r\n                        timestamp: sequenceTimestamp,\r\n                        info: lines[parseInt(i)],\r\n                        url: lines[parseInt(i) + 1],\r\n                    });\r\n                    changed = true;\r\n                }\r\n                while (this._playlist.length > 15) {\r\n                    this._playlist.shift();\r\n                }\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    getPlaylist() {\r\n        let playlist = \"\";\r\n        this._playlist.forEach((x) => (playlist = playlist + x.time + \"\\n\" + x.info + \"\\n\" + x.url + \"\\n\"));\r\n        return (this._header[0] +\r\n            \"\\n\" +\r\n            this._header[1] +\r\n            \"\\n\" +\r\n            this._header[2] +\r\n            \"\\n\" +\r\n            this._header[3] +\r\n            this._sequence +\r\n            \"\\n\" +\r\n            this._header[4] +\r\n            \"\\n\" +\r\n            this._header[5] +\r\n            \"\\n\" +\r\n            playlist);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSExTLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hscy9ITFMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLEdBQUc7SUFBaEI7UUFDVSxZQUFPLEdBQWtCLENBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFFLHlCQUF5QixFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDOUcsY0FBUyxHQUFtQixFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLENBQUMsQ0FBQztJQXdFeEIsQ0FBQztJQXRFQyxlQUFlLENBQUMsUUFBZ0IsSUFBRyxDQUFDO0lBRXBDLFdBQVcsQ0FBQyxRQUFnQixFQUFFLFdBQW9CLEtBQUs7UUFDckQsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFcEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQiwyREFBMkQ7UUFDM0QsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7WUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUMvQixTQUFTO3FCQUNWO2lCQUNGO2dCQUNELG9CQUFvQjtnQkFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUNsQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FDM0gsQ0FBQztnQkFFRixtQ0FBbUM7Z0JBQ25DLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsc0RBQXNEO2dCQUN0RCxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtvQkFDYixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO29CQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzt3QkFDbEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUM1QixTQUFTLEVBQUUsaUJBQWlCO3dCQUM1QixJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDeEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUM1QixDQUFDLENBQUM7b0JBQ0gsT0FBTyxHQUFHLElBQUksQ0FBQztpQkFDaEI7Z0JBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7b0JBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ3hCO2FBQ0Y7U0FDRjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxRQUFRLEdBQVcsRUFBRSxDQUFDO1FBRTFCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BHLE9BQU8sQ0FDTCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUk7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUk7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUk7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSTtZQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSTtZQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSTtZQUNKLFFBQVEsQ0FDVCxDQUFDO0lBQ0osQ0FBQztDQUNGIn0=\n\n/***/ }),\n\n/***/ \"./src/player/message.ts\":\n/*!*******************************!*\\\n  !*** ./src/player/message.ts ***!\n  \\*******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlayerMessage\": () => (/* binding */ PlayerMessage)\n/* harmony export */ });\nclass PlayerMessage {\r\n    constructor() {\r\n        this.getQuality = () => __webpack_require__.g.postMessage({ type: \"getQuality\" });\r\n        this.init = () => __webpack_require__.g.postMessage({ type: \"init\" });\r\n        this.pause = () => __webpack_require__.g.postMessage({ type: \"pause\" });\r\n        this.play = () => __webpack_require__.g.postMessage({ type: \"play\" });\r\n        this.pauseAndPlay = () => {\r\n            this.pause();\r\n            this.play();\r\n        };\r\n        this.isLoaded = false;\r\n        this.quality = \"\";\r\n        __webpack_require__.g.onEventMessage = (e) => {\r\n            // var myMessage = new MessageEvent('worker', { data: 'hello' });\r\n            // if (global.onmessage) global.onmessage(this, myMessage);\r\n            switch (e.data.funcName) {\r\n                case \"Buffering\": {\r\n                    break;\r\n                }\r\n                case \"onClientSinkPlaying\": {\r\n                    break;\r\n                }\r\n                case \"onClientSinkUpdate\": {\r\n                    break;\r\n                }\r\n                case \"pause\": {\r\n                    break;\r\n                }\r\n                case \"play\": {\r\n                    break;\r\n                }\r\n                case \"Ready\": {\r\n                    break;\r\n                }\r\n                case \"Playing\": {\r\n                    break;\r\n                }\r\n                case \"setQuality\": {\r\n                    if (e.data.args)\r\n                        this.quality = e.data.args[0].name;\r\n                    if (e.data.value)\r\n                        this.quality = e.data.value;\r\n                    break;\r\n                }\r\n                case \"setSetting\": {\r\n                    this.setting = e.data.value;\r\n                    break;\r\n                }\r\n                default: {\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbGF5ZXIvbWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sYUFBYTtJQWdCeEI7UUFmQSxlQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzlELFNBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEQsVUFBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRCxTQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUtuQixNQUFNLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDakMsaUVBQWlFO1lBRWpFLDJEQUEyRDtZQUUzRCxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUN2QixLQUFLLFdBQVcsQ0FBQyxDQUFDO29CQUNoQixNQUFNO2lCQUNQO2dCQUNELEtBQUsscUJBQXFCLENBQUMsQ0FBQztvQkFDMUIsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLG9CQUFvQixDQUFDLENBQUM7b0JBQ3pCLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztvQkFDWixNQUFNO2lCQUNQO2dCQUNELEtBQUssTUFBTSxDQUFDLENBQUM7b0JBQ1gsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO29CQUNaLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztvQkFDZCxNQUFNO2lCQUNQO2dCQUNELEtBQUssWUFBWSxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJO3dCQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUNwRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSzt3QkFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUM5QyxNQUFNO2lCQUNQO2dCQUNELEtBQUssWUFBWSxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQzVCLE1BQU07aUJBQ1A7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7b0JBQ1AsTUFBTTtpQkFDUDthQUNGO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGIn0=\n\n/***/ }),\n\n/***/ \"./src/player/player.ts\":\n/*!******************************!*\\\n  !*** ./src/player/player.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _stream_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../stream/stream */ \"./src/stream/stream.ts\");\n/* harmony import */ var _stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stream/type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message */ \"./src/player/message.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.streamList = [];\r\n        this.actualChannel = \"\";\r\n        this.playingAds = false;\r\n        this.message = new _message__WEBPACK_IMPORTED_MODULE_2__.PlayerMessage();\r\n        this.LogPrint = __webpack_require__.g.LogPrint;\r\n        this.onStartAds = () => { };\r\n        this.onEndAds = () => { };\r\n        this.isAds = (x, allowChange = false) => {\r\n            // const ads = x.toString().includes(\"stitched-ad\") || x.toString().includes(\"twitch-client-ad\") || x.toString().includes(\"twitch-ad-quartile\");\r\n            const ads = x.toString().includes(\"stitched\");\r\n            if (!allowChange)\r\n                return ads;\r\n            if (this.playingAds != ads && ads)\r\n                this.onStartAds();\r\n            if (this.playingAds != ads && !ads)\r\n                this.onEndAds();\r\n            this.playingAds = ads;\r\n            return this.playingAds;\r\n        };\r\n        this.currentStream = (channel = this.actualChannel) => {\r\n            return this.streamList.find((x) => x.channelName === channel);\r\n        };\r\n        this.message.init();\r\n    }\r\n    onfetch(url, response) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentStream = yield this.currentStream();\r\n            currentStream.hls.addPlaylist(response);\r\n            if (!this.isAds(response, true))\r\n                return true;\r\n            try {\r\n                const local = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n                if (local)\r\n                    currentStream.hls.addPlaylist(local);\r\n                if (!local)\r\n                    currentStream.streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n                if (local)\r\n                    return true;\r\n                const external = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external);\r\n                if (external)\r\n                    currentStream.hls.addPlaylist(external);\r\n                if (external)\r\n                    return true;\r\n                console.log(\"fail\");\r\n                // currentStream.hls.addPlaylist(response, true);\r\n                return false;\r\n            }\r\n            catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        });\r\n    }\r\n    fetchm3u8ByStreamType(accessType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.LogPrint(\"Stream Type: \" + accessType.name);\r\n            const streamUrlList = this.currentStream().getStreamServersByStreamType(accessType, this.message.quality);\r\n            //by the array order, try get m3u8 content and return if don't have ads.\r\n            for (const streamUrl of streamUrlList) {\r\n                const text = yield (yield __webpack_require__.g.realFetch(streamUrl === null || streamUrl === void 0 ? void 0 : streamUrl.url)).text();\r\n                if (this.isAds(text))\r\n                    continue;\r\n                return text;\r\n            }\r\n            return \"\";\r\n        });\r\n    }\r\n    onStartChannel(url, text) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const channelName = /hls\\/(.*).m3u8/gm.exec(url) || [];\r\n            let existent = false;\r\n            let whitelist = [];\r\n            if (!channelName[1])\r\n                return false;\r\n            this.actualChannel = channelName[1];\r\n            this.LogPrint(\"Channel \" + this.actualChannel);\r\n            if (!this.message.setting == undefined) {\r\n                if (!this.message.setting.whitelist == undefined) {\r\n                    whitelist = this.message.setting.whitelist;\r\n                }\r\n            }\r\n            if (whitelist.includes(this.actualChannel))\r\n                return false;\r\n            if (!this.streamList.find((c) => c.channelName === this.actualChannel)) {\r\n                let proxyUrl = \"\";\r\n                if (this.message.setting)\r\n                    proxyUrl = this.message.setting.proxyUrl ? this.message.setting.proxyUrl : \"\";\r\n                this.streamList.push(new _stream_stream__WEBPACK_IMPORTED_MODULE_0__.Stream(this.actualChannel, proxyUrl));\r\n            }\r\n            else {\r\n                this.LogPrint(\"Exist: \" + this.actualChannel);\r\n                this.currentStream().serverList = [];\r\n                existent = true;\r\n            }\r\n            const stream = this.currentStream();\r\n            //--------------------------------------------//\r\n            //--------------------------------------------//\r\n            this.LogPrint(\"Local Server: Loading\");\r\n            yield stream.addStreamLink(text, \"local\");\r\n            this.LogPrint(\"Local Server: OK\");\r\n            stream.streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n            if (existent)\r\n                return;\r\n            //if the proxy option on popup is disabled, it is never called.\r\n            if (this.message.setting) {\r\n                if (this.message.setting.toggleProxy)\r\n                    stream.tryExternalPlayer();\r\n            }\r\n            return;\r\n        });\r\n    }\r\n    inflateFetch() {\r\n        //eslint-disable-next-line no-this-assign\r\n        __webpack_require__.g.fetch = function (url, options) {\r\n            return __awaiter(this, arguments, void 0, function* () {\r\n                if (typeof url === \"string\") {\r\n                    if (url.endsWith(\"m3u8\") && url.includes(\"ttvnw.net\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                yield __webpack_require__.g\r\n                                    .realFetch(url, options)\r\n                                    .then((response) => __awaiter(this, void 0, void 0, function* () { return response.text(); }))\r\n                                    .then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    //send the flow stream to script valitor and classificator\r\n                                    yield __webpack_require__.g.player.onfetch(url, text);\r\n                                    var playlist = __webpack_require__.g.player.currentStream().hls.getPlaylist();\r\n                                    resolve(new Response(playlist));\r\n                                }));\r\n                            }\r\n                            catch (_a) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"usher.ttvnw.net/api/channel/hls/\") && !url.includes(\"picture-by-picture\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                const response = yield __webpack_require__.g.realFetch(url, options);\r\n                                if (!response.ok) {\r\n                                    resolve(response);\r\n                                    //this.LogPrint(\"channel offline\");\r\n                                }\r\n                                response.text().then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    yield __webpack_require__.g.player.onStartChannel(url, text);\r\n                                    resolve(new Response(text));\r\n                                }));\r\n                            }\r\n                            catch (_b) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"picture-by-picture\")) {\r\n                        this.LogPrint(\"picture-by-picture\");\r\n                        return new Response();\r\n                    }\r\n                }\r\n                return __webpack_require__.g.realFetch.apply(this, arguments);\r\n            });\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsYXllci9wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxNQUFNO0lBUWpCO1FBUEEsZUFBVSxHQUFhLEVBQUUsQ0FBQztRQUMxQixrQkFBYSxHQUFXLEVBQUUsQ0FBQztRQUMzQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRW5CLFlBQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBTTNCLGVBQVUsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkIsYUFBUSxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVyQixVQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQUUsY0FBdUIsS0FBSyxFQUFFLEVBQUU7WUFDbEQsZ0pBQWdKO1lBQ2hKLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsT0FBTyxHQUFHLENBQUM7WUFDN0IsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEdBQUcsSUFBSSxHQUFHO2dCQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyRCxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRztnQkFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFFdEIsT0FBTyxJQUFJLENBQUMs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\n\n/***/ }),\n\n/***/ \"./src/stream/stream.ts\":\n/*!******************************!*\\\n  !*** ./src/stream/stream.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stream\": () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var _hls_HLS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hls/HLS */ \"./src/hls/HLS.ts\");\n/* harmony import */ var _type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type/streamServer.types */ \"./src/stream/type/streamServer.types.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Stream {\r\n    constructor(channelName, tunnel = \"\") {\r\n        this.serverList = [];\r\n        this.hls = new _hls_HLS__WEBPACK_IMPORTED_MODULE_0__.HLS();\r\n        this.channelName = \"\";\r\n        this.tunnel = [\"https://eu1.jupter.ga/channel/{channelname}\", \"https://eu2.jupter.ga/channel/{channelname}\"];\r\n        this.currentTunnel = this.tunnel[0];\r\n        this.tryExternalPlayer = () => __awaiter(this, void 0, void 0, function* () {\r\n            if (!(yield this.streamAccess(_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external))) {\r\n                this.externalPlayer(true);\r\n            }\r\n        });\r\n        this.channelName = channelName;\r\n        if (tunnel)\r\n            this.currentTunnel = tunnel;\r\n    }\r\n    //add m3u8 links with quality to the list of servers\r\n    addStreamLink(text, type = \"local\", sig = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const qualityUrlSplit = [];\r\n            let captureArray;\r\n            const REGEX = /NAME=\"((?:\\S+\\s+\\S+|\\S+))\",AUTO(?:^|\\S+\\s+)(?:^|\\S+\\s+)(https:\\/\\/video(\\S+).m3u8)/g;\r\n            while ((captureArray = REGEX.exec(text)) !== null) {\r\n                qualityUrlSplit.push({ quality: captureArray[1], url: captureArray[2] });\r\n            }\r\n            const streamList = new _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__.streamServer({ type: type, urlList: qualityUrlSplit, sig: sig });\r\n            this.serverList.push(streamList);\r\n            if (!sig) {\r\n                yield this.signature();\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    signature() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const REGEX = /video-weaver.(.*).hls.ttvnw.net\\/v1\\/playlist\\/(.*).m3u8$/gm;\r\n            yield new Promise((resolve) => {\r\n                this.serverList\r\n                    .filter((x) => x.sig == false)\r\n                    .forEach((x) => __awaiter(this, void 0, void 0, function* () {\r\n                    const match = REGEX.exec(x.urlList[0].url);\r\n                    if (match) {\r\n                        try {\r\n                            yield fetch(\"https://jupter.ga/hls/v2/sig/\" + match[2] + \"/\" + match[1]);\r\n                            x.sig = true;\r\n                            resolve(true);\r\n                        }\r\n                        catch (_a) {\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                })),\r\n                    resolve(false);\r\n            });\r\n        });\r\n    }\r\n    //add a new player stream external\r\n    externalPlayer(customIgnore = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (customIgnore)\r\n                this.currentTunnel = this.tunnel[0];\r\n            try {\r\n                __webpack_require__.g.LogPrint(\"External Server: Loading\");\r\n                const response = yield __webpack_require__.g.realFetch(this.currentTunnel.replace(\"{channelname}\", this.channelName));\r\n                if (!response.ok) {\r\n                    throw new Error(\"server proxy return error or not found\");\r\n                }\r\n                const text = yield response.text();\r\n                __webpack_require__.g.LogPrint(\"External Server: OK\");\r\n                this.addStreamLink(text, _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                __webpack_require__.g.LogPrint(\"server proxy return error or not found \" + this.currentTunnel);\r\n                __webpack_require__.g.LogPrint(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    //create a new stream access\r\n    streamAccess(stream) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (stream.name == _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name)\r\n                return yield this.externalPlayer();\r\n            try {\r\n                const query = 'query PlaybackAccessToken_Template($login: String!, $isLive: Boolean!, $vodID: ID!, $isVod: Boolean!, $playerType: String!) {  streamPlaybackAccessToken(channelName: $login, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isLive) {    value    signature    __typename  }  videoPlaybackAccessToken(id: $vodID, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isVod) {    value    signature    __typename  }}';\r\n                const body = {\r\n                    operationName: \"PlaybackAccessToken_Template\",\r\n                    query: query,\r\n                    variables: {\r\n                        isLive: true,\r\n                        login: this.channelName,\r\n                        isVod: false,\r\n                        vodID: \"\",\r\n                        playerType: stream.playerType,\r\n                    },\r\n                };\r\n                const gql = yield __webpack_require__.g.realFetch(\"https://gql.twitch.tv/gql\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Client-ID\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\" },\r\n                    body: JSON.stringify(body),\r\n                });\r\n                const streamDataAccess = yield gql.json();\r\n                const url = \"https://usher.ttvnw.net/api/channel/hls/\" +\r\n                    this.channelName +\r\n                    \".m3u8?allow_source=true&fast_bread=true&p=\" +\r\n                    Math.floor(Math.random() * 1e7) +\r\n                    \"&player_backend=mediaplayer&playlist_include_framerate=true&reassignments_supported=false&sig=\" +\r\n                    streamDataAccess.data.streamPlaybackAccessToken.signature +\r\n                    \"&supported_codecs=avc1&token=\" +\r\n                    streamDataAccess.data.streamPlaybackAccessToken.value;\r\n                const text = yield (yield __webpack_require__.g.realFetch(url)).text();\r\n                __webpack_require__.g.LogPrint(\"Server loaded \" + stream.name);\r\n                this.addStreamLink(text, stream.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    getStreamServersByStreamType(accessType, quality) {\r\n        //filter all server by type\r\n        const servers = this.serverList.filter((x) => x.type == accessType.name);\r\n        if (!servers)\r\n            return [];\r\n        //filter all server url by quality or bestquality\r\n        const streamUrlList = servers.map((x) => x.findByQuality(quality)).filter((x) => x !== undefined);\r\n        return !streamUrlList.length ? servers.map((x) => x.bestQuality()) : streamUrlList;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cmVhbS9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXJFLE1BQU0sT0FBTyxNQUFNO0lBUWpCLFlBQVksV0FBbUIsRUFBRSxTQUFpQixFQUFFO1FBUHBELGVBQVUsR0FBbUIsRUFBRSxDQUFDO1FBQ2hDLFFBQUcsR0FBUSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBRXpCLFdBQU0sR0FBRyxDQUFDLDZDQUE2QyxFQUFFLDZDQUE2QyxDQUFDLENBQUM7UUFDeEcsa0JBQWEsR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBNEV2QyxzQkFBaUIsR0FBRyxHQUFTLEVBQUU7WUFDN0IsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO2dCQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzNCO1FBQ0gsQ0FBQyxDQUFBLENBQUM7UUE3RUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxNQUFNO1lBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDMUMsQ0FBQztJQUVELG9EQUFvRDtJQUM5QyxhQUFhLENBQUMsSUFBWSxFQUFFLElBQUksR0FBRyxPQUFPLEVBQUUsR0FBRyxHQUFHLElBQUk7O1lBQzFELE1BQU0sZUFBZSxHQUFpQixFQUFFLENBQUM7WUFDekMsSUFBSSxZQUFvQyxDQUFDO1lBRXpDLE1B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\n\n/***/ }),\n\n/***/ \"./src/stream/type/stream.type.ts\":\n/*!****************************************!*\\\n  !*** ./src/stream/type/stream.type.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"streams\": () => (/* binding */ streams)\n/* harmony export */ });\nconst streams = {\r\n    picture: { playerType: \"thunderdome\", name: \"lower\" },\r\n    local: { playerType: \"embed\", name: \"normal\" },\r\n    external: { name: \"external\" },\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLnR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RyZWFtL3R5cGUvc3RyZWFtLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNyRCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7SUFDOUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtDQUMvQixDQUFDIn0=\n\n/***/ }),\n\n/***/ \"./src/stream/type/streamServer.types.ts\":\n/*!***********************************************!*\\\n  !*** ./src/stream/type/streamServer.types.ts ***!\n  \\***********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"qualityUrl\": () => (/* binding */ qualityUrl),\n/* harmony export */   \"streamServer\": () => (/* binding */ streamServer)\n/* harmony export */ });\nclass qualityUrl {\r\n    constructor() {\r\n        this.url = \"\";\r\n        this.quality = \"\";\r\n    }\r\n}\r\nclass streamServer {\r\n    constructor(partial) {\r\n        this.bestQuality = () => {\r\n            return this.urlList[0];\r\n        };\r\n        this.findByQuality = (quality) => this.urlList.find((x) => x.quality == quality);\r\n        Object.assign(this, partial);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtU2VydmVyLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cmVhbS90eXBlL3N0cmVhbVNlcnZlci50eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sVUFBVTtJQUF2QjtRQUNFLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFDakIsWUFBTyxHQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQUE7QUFDRCxNQUFNLE9BQU8sWUFBWTtJQVV2QixZQUFZLE9BQThCO1FBTDFDLGdCQUFXLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUM7UUFDRixrQkFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUdsRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBQ0YifQ==\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n/*!***************************!*\\\n  !*** ./src/app.worker.ts ***!\n  \\***************************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _player_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player/player */ \"./src/player/player.ts\");\n\r\nfunction app() {\r\n    __webpack_require__.g.LogPrint = (x) => console.log(\"[Purple]: \", x);\r\n    __webpack_require__.g.addEventListener(\"message\", (e) => {\r\n        __webpack_require__.g.onEventMessage(e);\r\n    });\r\n    const player = new _player_player__WEBPACK_IMPORTED_MODULE_0__.Player();\r\n    __webpack_require__.g.realFetch = __webpack_require__.g.fetch;\r\n    __webpack_require__.g.player = player;\r\n    player.inflateFetch();\r\n    __webpack_require__.g.LogPrint(\"Script running\");\r\n}\r\napp();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAud29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVN6QyxNQUFNLENBQUMsT0FBTyxVQUFVLEdBQUc7SUFDekIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO1FBQzVDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNoQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUV2QixNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFDRCxHQUFHLEVBQUUsQ0FBQyJ9\n})();\n\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/app.worker.js */ "./dist/app.worker.js");
//this line gonna import the content from compile worker as string
//@ts-expect-error

(function () {
    let mainWorker;
    window.postMessage({ type: "init" });
    window.Worker = class WorkerInjector extends Worker {
        constructor(twitchBlobUrl) {
            console.log("new worker intance " + twitchBlobUrl);
            if (twitchBlobUrl == "")
                super(twitchBlobUrl);
            console.log("[Purple]: init " + twitchBlobUrl);
            const newBlobStr = `${_dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__}
      importScripts('${twitchBlobUrl}');`;
            super(URL.createObjectURL(new Blob([newBlobStr], { type: "text/javascript" })));
            mainWorker = this;
            mainWorker.declareEventWorker();
            mainWorker.declareEventWindow();
        }
        declareEventWorker() {
            this.addEventListener("message", (event) => {
                // if (typeof (event.data.type) !== "string") console.log(event.data.arg);
                // if (typeof (event.data.type) !== "string") console.log(event.data);
                switch (event.data.type) {
                    case "init": {
                        window.postMessage({ type: "getSetting", value: null });
                        break;
                    }
                    case "PlayerQualityChanged": {
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.name });
                        break;
                    }
                    case "pause": {
                        mainWorker.postMessage({ funcName: "pause", args: undefined, id: 1 });
                        break;
                    }
                    case "play": {
                        mainWorker.postMessage({ funcName: "play", args: undefined, id: 1 });
                        break;
                    }
                    default: {
                        break;
                    }
                }
                if (!event.data.arg)
                    return;
                switch (event.data.arg.key) {
                    case "quality": {
                        if (!event.data.arg.value.name)
                            break;
                        console.log("Changed quality by player: " + event.data.arg.value.name);
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.value.name });
                        break;
                    }
                    case "state": {
                        mainWorker.postMessage({ funcName: event.data.arg.value });
                    }
                    default: {
                        break;
                    }
                }
                switch (event.data.arg.name) {
                    case "pause": {
                        break;
                    }
                    case "play": {
                        break;
                    }
                    default: {
                        break;
                    }
                }
            });
        }
        declareEventWindow() {
            //Event listener from window and extension.
            window.addEventListener("message", (event) => {
                switch (event.data.type) {
                    case "setSetting": {
                        //send settings to worker
                        mainWorker.postMessage({ funcName: "setSetting", value: event.data.value });
                    }
                }
            });
        }
    };
    // function videoPlayer() {
    //   try {
    //     var videoController = null;
    //     var videoPlayer = null;
    //     function findReactNode(root, constraint) {
    //       if (root.stateNode && constraint(root.stateNode)) {
    //         return root.stateNode;
    //       }
    //       let node = root.child;
    //       while (node) {
    //         const result = findReactNode(node, constraint);
    //         if (result) {
    //           return result;
    //         }
    //         node = node.sibling;
    //       }
    //       return null;
    //     }
    //     var reactRootNode = null;
    //     var rootNode = document.querySelector("#root");
    //     if (
    //       rootNode &&
    //       rootNode._reactRootContainer &&
    //       rootNode._reactRootContainer._internalRoot &&
    //       rootNode._reactRootContainer._internalRoot.current
    //     ) {
    //       reactRootNode = rootNode._reactRootContainer._internalRoot.current;
    //     }
    //     videoPlayer = findReactNode(reactRootNode, (node) => node.setPlayerActive && node.props && node.props.mediaPlayerInstance);
    //     videoPlayer =
    //       videoPlayer && videoPlayer.props && videoPlayer.props.mediaPlayerInstance ? videoPlayer.props.mediaPlayerInstance : null;
    //     window.videoPlayer = videoPlayer;
    //   } catch (e) {
    //     console.log(e);
    //   }
    // }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0VBQWtFO0FBQ2xFLGtCQUFrQjtBQUNsQixPQUFPLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQztBQUV4QyxDQUFDO0lBQ0MsSUFBSSxVQUFlLENBQUM7SUFFcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxjQUFlLFNBQVEsTUFBTTtRQUNqRCxZQUFZLGFBQWtCO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLENBQUM7WUFFbkQsSUFBSSxhQUFhLElBQUksRUFBRTtnQkFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsQ0FBQztZQUUvQyxNQUFNLFVBQVUsR0FBRyxHQUFHLEdBQUc7dUJBQ1IsYUFBYSxLQUFLLENBQUM7WUFFcEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDbEIsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbEMsQ0FBQztRQUVELGtCQUFrQjtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pDLDBFQUEwRTtnQkFDMUUsc0VBQXNFO2dCQUV0RSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUN2QixLQUFL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
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,