/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/app.worker.js":
/*!****************************!*\
  !*** ./dist/app.worker.js ***!
  \****************************/
/***/ ((module) => {

module.exports = "/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/hls/HLS.ts\":\n/*!************************!*\\\n  !*** ./src/hls/HLS.ts ***!\n  \\************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HLS\": () => (/* binding */ HLS)\n/* harmony export */ });\nclass HLS {\r\n    constructor() {\r\n        this._header = [\"#EXTM3U\", \"#EXT-X-VERSION:3\", \"#EXT-X-TARGETDURATION:6\", \"#EXT-X-MEDIA-SEQUENCE:\"];\r\n        this._playlist = [];\r\n        this._sequence = 0;\r\n    }\r\n    addPlaylistTest(playlist) {\r\n    }\r\n    addPlaylist(playlist, allowAds = false) {\r\n        if (playlist === null) {\r\n            return false;\r\n        }\r\n        let changed = false;\r\n        const lines = playlist.toString().split(/[\\r\\n]/);\r\n        this._header[4] = lines[4];\r\n        this._header[5] = lines[5];\r\n        //take all m3u9 content to the playlist and build a varible\r\n        for (const i in lines) {\r\n            if (lines[i].includes(\"#EXTINF\")) {\r\n                if (!allowAds) {\r\n                    if (!lines[i].includes(\",live\")) {\r\n                        continue;\r\n                    }\r\n                }\r\n                //timestamp sequence\r\n                const sequenceTimestamp = Math.floor(new Date(lines[parseInt(i) - 1].slice(lines[parseInt(i) - 1].length - 24, lines[parseInt(i) - 1].length)).getTime() / 1000);\r\n                //select all sequence that no exist\r\n                const r = this._playlist.filter((x) => {\r\n                    return x.timestamp >= sequenceTimestamp;\r\n                });\r\n                //add the sequence on playlist variable if it no exist\r\n                if (!r.length) {\r\n                    this._sequence = this._sequence + 1;\r\n                    this._playlist.push({\r\n                        time: lines[parseInt(i) - 1],\r\n                        timestamp: sequenceTimestamp,\r\n                        info: lines[parseInt(i)],\r\n                        url: lines[parseInt(i) + 1],\r\n                    });\r\n                    changed = true;\r\n                }\r\n                while (this._playlist.length > 15) {\r\n                    this._playlist.shift();\r\n                }\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    getPlaylist() {\r\n        return (this._header[0] +\r\n            \"\\n\" +\r\n            this._header[1] +\r\n            \"\\n\" +\r\n            this._header[2] +\r\n            \"\\n\" +\r\n            this._header[3] +\r\n            this._sequence +\r\n            \"\\n\" +\r\n            this._header[4] +\r\n            \"\\n\" +\r\n            this._header[5] +\r\n            \"\\n\" +\r\n            this._playlist.map((x) => {\r\n                return x.time + \"\\n\" + x.info + \"\\n\" + x.url + \"\\n\";\r\n            }));\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSExTLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hscy9ITFMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLEdBQUc7SUFBaEI7UUFDVSxZQUFPLEdBQWtCLENBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFFLHlCQUF5QixFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDOUcsY0FBUyxHQUFtQixFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLENBQUMsQ0FBQztJQXVFeEIsQ0FBQztJQXJFQyxlQUFlLENBQUMsUUFBZ0I7SUFFaEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFnQixFQUFFLFdBQW9CLEtBQUs7UUFDckQsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFcEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQiwyREFBMkQ7UUFDM0QsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7WUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUMvQixTQUFTO3FCQUNWO2lCQUNGO2dCQUNELG9CQUFvQjtnQkFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBRWpLLG1DQUFtQztnQkFDbkMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsT0FBTyxDQUFDLENBQUMsU0FBUyxJQUFJLGlCQUFpQixDQUFDO2dCQUMxQyxDQUFDLENBQUMsQ0FBQztnQkFDSCxzREFBc0Q7Z0JBQ3RELElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO29CQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7b0JBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO3dCQUNsQixJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQzVCLFNBQVMsRUFBRSxpQkFBaUI7d0JBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4QixHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQzVCLENBQUMsQ0FBQztvQkFDSCxPQUFPLEdBQUcsSUFBSSxDQUFDO2lCQUNoQjtnQkFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDeEI7YUFDRjtTQUNGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLENBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJO1lBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJO1lBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJO1lBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsU0FBUztZQUNkLElBQUk7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUk7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUk7WUFDSixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YifQ==\n\n/***/ }),\n\n/***/ \"./src/player/message.ts\":\n/*!*******************************!*\\\n  !*** ./src/player/message.ts ***!\n  \\*******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlayerMessage\": () => (/* binding */ PlayerMessage)\n/* harmony export */ });\nclass PlayerMessage {\r\n    constructor() {\r\n        this.getQuality = () => __webpack_require__.g.postMessage({ type: \"getQuality\" });\r\n        this.init = () => __webpack_require__.g.postMessage({ type: \"init\" });\r\n        this.pause = () => __webpack_require__.g.postMessage({ type: \"pause\" });\r\n        this.play = () => __webpack_require__.g.postMessage({ type: \"play\" });\r\n        this.pauseAndPlay = () => {\r\n            this.pause();\r\n            this.play();\r\n        };\r\n        this.quality = \"\";\r\n        __webpack_require__.g.onEventMessage = (e) => {\r\n            // var myMessage = new MessageEvent('worker', { data: 'hello' });\r\n            // if (global.onmessage) global.onmessage(this, myMessage);\r\n            switch (e.data.funcName) {\r\n                case \"pause\": {\r\n                    break;\r\n                }\r\n                case \"play\": {\r\n                    break;\r\n                }\r\n                case \"Ready\": {\r\n                    break;\r\n                }\r\n                case \"Playing\": {\r\n                    break;\r\n                }\r\n                case \"setQuality\": {\r\n                    if (e.data.args)\r\n                        this.quality = e.data.args[0].name;\r\n                    if (e.data.value)\r\n                        this.quality = e.data.value;\r\n                    console.log(\"Message: \" + this.quality);\r\n                    break;\r\n                }\r\n                case \"setSetting\": {\r\n                    this.setting = e.data.value;\r\n                    break;\r\n                }\r\n                default: {\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbGF5ZXIvbWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sYUFBYTtJQWN0QjtRQWJBLGVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDOUQsU0FBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNsRCxVQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELFNBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEQsaUJBQVksR0FBRyxHQUFHLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQTtRQUVELFlBQU8sR0FBVyxFQUFFLENBQUM7UUFLakIsTUFBTSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQy9CLGlFQUFpRTtZQUVqRSwyREFBMkQ7WUFFM0QsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsS0FBSyxPQUFPLENBQUMsQ0FBQztvQkFDVixNQUFNO2lCQUNUO2dCQUNELEtBQUssTUFBTSxDQUFDLENBQUM7b0JBQ1QsTUFBTTtpQkFDVDtnQkFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO29CQUNWLE1BQU07aUJBQ1Q7Z0JBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztvQkFDWixNQUFNO2lCQUNUO2dCQUNELEtBQUssWUFBWSxDQUFDLENBQUM7b0JBQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7d0JBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3BELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO3dCQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDeEMsTUFBTTtpQkFDVDtnQkFDRCxLQUFLLFlBQVksQ0FBQyxDQUFDO29CQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQzVCLE1BQU07aUJBQ1Q7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7b0JBQ0wsTUFBTTtpQkFDVDthQUNKO1FBQ0wsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztDQUNKIn0=\n\n/***/ }),\n\n/***/ \"./src/player/player.ts\":\n/*!******************************!*\\\n  !*** ./src/player/player.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _stream_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../stream/stream */ \"./src/stream/stream.ts\");\n/* harmony import */ var _stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stream/type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message */ \"./src/player/message.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.streamList = [];\r\n        this.actualChannel = \"\";\r\n        this.playingAds = false;\r\n        this.quality = \"\";\r\n        this.LogPrint = __webpack_require__.g.LogPrint;\r\n        this.message = new _message__WEBPACK_IMPORTED_MODULE_2__.PlayerMessage();\r\n        this.playerChangeHLS = () => this.message.pauseAndPlay();\r\n        this.isAds = (x, allowChange = false) => {\r\n            // const ads = x.toString().includes(\"stitched-ad\") || x.toString().includes(\"twitch-client-ad\") || x.toString().includes(\"twitch-ad-quartile\");\r\n            const ads = x.toString().includes(\"stitched\");\r\n            if (!allowChange)\r\n                return ads;\r\n            if (this.playingAds != ads)\r\n                this.playerChangeHLS();\r\n            this.playingAds = ads;\r\n            return this.playingAds;\r\n        };\r\n        this.currentStream = (channel = this.actualChannel) => {\r\n            return this.streamList.find((x) => x.channelName === channel);\r\n        };\r\n        this.message.init();\r\n    }\r\n    onfetch(url, response) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentStream = yield this.currentStream();\r\n            currentStream.hls.addPlaylist(response);\r\n            if (!this.isAds(response, true))\r\n                return true;\r\n            console.log(\"Player: \" + this.message.quality);\r\n            this.LogPrint(\"ads found\");\r\n            this.currentStream().streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n            try {\r\n                const local = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local.name);\r\n                if (local)\r\n                    currentStream.hls.addPlaylist(local);\r\n                if (local)\r\n                    return true;\r\n                const picture = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.picture.name);\r\n                if (picture)\r\n                    currentStream.hls.addPlaylist(picture);\r\n                if (picture)\r\n                    return true;\r\n                const external = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name);\r\n                if (external)\r\n                    currentStream.hls.addPlaylist(external);\r\n                if (external)\r\n                    return true;\r\n                console.log(\"fail\");\r\n                //if not resolve return the 480p to the user.\r\n                currentStream.hls.addPlaylist(local, true);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        });\r\n    }\r\n    fetchm3u8ByStreamType(serverType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.LogPrint(\"Stream Type: \" + serverType);\r\n            //filter all server by type\r\n            const servers = this.currentStream().serverList.filter((x) => x.type == serverType);\r\n            if (!servers)\r\n                return \"\";\r\n            //filter all server url by quality or bestquality\r\n            var qualityUrl = servers.map(x => x.findByQuality(this.message.quality)).filter(x => x !== undefined);\r\n            if (!qualityUrl.length)\r\n                qualityUrl = servers.map(x => x.bestQuality());\r\n            //by the array order, try get m3u8 content and return if don't have ads.\r\n            for (const url of qualityUrl) {\r\n                const text = yield (yield __webpack_require__.g.realFetch(url === null || url === void 0 ? void 0 : url.url)).text();\r\n                if (this.isAds(text))\r\n                    continue;\r\n                return text;\r\n            }\r\n            return \"\";\r\n        });\r\n    }\r\n    onStartChannel(url, text) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const channelName = /hls\\/(.*).m3u8/gm.exec(url) || [];\r\n            let stream;\r\n            let existent = false;\r\n            let whitelist = [];\r\n            if (channelName[1]) {\r\n                if (!this.message.setting == undefined) {\r\n                    if (!this.message.setting.whitelist == undefined) {\r\n                        whitelist = this.message.setting.whitelist;\r\n                    }\r\n                }\r\n                this.actualChannel = channelName[1];\r\n                this.LogPrint(\"Channel \" + channelName[1]);\r\n                if (whitelist.includes(channelName[1]))\r\n                    return;\r\n                if (!this.streamList.find((c) => c.channelName === channelName[1])) {\r\n                    let proxyUrl = \"\";\r\n                    if (this.message.setting)\r\n                        proxyUrl = this.message.setting.proxyUrl ? this.message.setting.proxyUrl : \"\";\r\n                    this.streamList.push(new _stream_stream__WEBPACK_IMPORTED_MODULE_0__.Stream(channelName[1], proxyUrl));\r\n                }\r\n                else {\r\n                    this.LogPrint(\"Exist: \" + channelName[1]);\r\n                    existent = true;\r\n                }\r\n            }\r\n            stream = this.currentStream();\r\n            //--------------------------------------------//\r\n            //--------------------------------------------//\r\n            this.LogPrint(\"Local Server: Loading\");\r\n            yield stream.addStreamLink(text, \"local\", false);\r\n            this.LogPrint(\"Local Server: OK\");\r\n            stream.streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n            if (existent)\r\n                return;\r\n            stream.tryExternalPlayer();\r\n            //if the external request get false. try again.\r\n            //the second request gonna be with const server variable.\r\n            //--------------------------------------------//\r\n            return;\r\n        });\r\n    }\r\n    inflateFetch() {\r\n        //eslint-disable-next-line no-this-assign\r\n        __webpack_require__.g.fetch = function (url, options) {\r\n            return __awaiter(this, arguments, void 0, function* () {\r\n                if (typeof url === \"string\") {\r\n                    if (url.endsWith(\"m3u8\") && url.includes(\"ttvnw.net\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                yield __webpack_require__.g.realFetch(url, options)\r\n                                    .then((response) => __awaiter(this, void 0, void 0, function* () { return (response.text()); }))\r\n                                    .then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    //send the flow stream to script valitor and classificator\r\n                                    yield __webpack_require__.g.player.onfetch(url, text);\r\n                                    var playlist = __webpack_require__.g.player.currentStream().hls.getPlaylist();\r\n                                    resolve(new Response(playlist));\r\n                                }));\r\n                            }\r\n                            catch (_a) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"usher.ttvnw.net/api/channel/hls/\") && !url.includes(\"picture-by-picture\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                const response = yield __webpack_require__.g.realFetch(url, options);\r\n                                if (!response.ok) {\r\n                                    resolve(response);\r\n                                    //this.LogPrint(\"channel offline\");\r\n                                }\r\n                                response.text().then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    yield __webpack_require__.g.player.onStartChannel(url, text);\r\n                                    resolve(new Response(text));\r\n                                }));\r\n                            }\r\n                            catch (_b) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"picture-by-picture\")) {\r\n                        this.LogPrint(\"picture-by-picture\");\r\n                        return new Response();\r\n                    }\r\n                }\r\n                return __webpack_require__.g.realFetch.apply(this, arguments);\r\n            });\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,\n\n/***/ }),\n\n/***/ \"./src/stream/stream.ts\":\n/*!******************************!*\\\n  !*** ./src/stream/stream.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stream\": () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var _hls_HLS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hls/HLS */ \"./src/hls/HLS.ts\");\n/* harmony import */ var _type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type/streamServer.types */ \"./src/stream/type/streamServer.types.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Stream {\r\n    constructor(channelName, tunnel = \"\") {\r\n        this.serverList = [];\r\n        this.hls = new _hls_HLS__WEBPACK_IMPORTED_MODULE_0__.HLS();\r\n        this.channelName = \"\";\r\n        this.tunnel = [\"https://eu1.jupter.ga/channel/{channelname}\", \"https://eu2.jupter.ga/channel/{channelname}\"];\r\n        this.currentTunnel = this.tunnel[0];\r\n        this.tryExternalPlayer = () => __awaiter(this, void 0, void 0, function* () {\r\n            if (!(yield this.streamAccess(_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external))) {\r\n                this.externalPlayer(true);\r\n            }\r\n        });\r\n        this.channelName = channelName;\r\n        if (tunnel)\r\n            this.currentTunnel = tunnel;\r\n    }\r\n    //add m3u8 links with quality to the list of servers\r\n    addStreamLink(text, type = \"local\", sig = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const qualityUrlSplit = [];\r\n            let captureArray;\r\n            const REGEX = /NAME=\"((?:\\S+\\s+\\S+|\\S+))\",AUTO(?:^|\\S+\\s+)(?:^|\\S+\\s+)(https:\\/\\/video(\\S+).m3u8)/g;\r\n            while ((captureArray = REGEX.exec(text)) !== null) {\r\n                qualityUrlSplit.push({ quality: captureArray[1], url: captureArray[2] });\r\n            }\r\n            const streamList = new _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__.streamServer({ type: type, urlList: qualityUrlSplit, sig: sig });\r\n            this.serverList.push(streamList);\r\n            if (!sig) {\r\n                yield this.signature();\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    signature() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const REGEX = /video-weaver.(.*).hls.ttvnw.net\\/v1\\/playlist\\/(.*).m3u8$/gm;\r\n            yield new Promise((resolve) => {\r\n                this.serverList\r\n                    .filter((x) => x.sig == false)\r\n                    .forEach((x) => __awaiter(this, void 0, void 0, function* () {\r\n                    const match = REGEX.exec(x.urlList[0].url);\r\n                    if (match) {\r\n                        try {\r\n                            yield fetch(\"https://jupter.ga/hls/v2/sig/\" + match[2] + \"/\" + match[1]);\r\n                            x.sig = true;\r\n                            resolve(true);\r\n                        }\r\n                        catch (_a) {\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                })),\r\n                    resolve(false);\r\n            });\r\n        });\r\n    }\r\n    //add a new player stream external\r\n    externalPlayer(customIgnore = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (customIgnore)\r\n                this.currentTunnel = this.tunnel[0];\r\n            try {\r\n                __webpack_require__.g.LogPrint(\"External Server: Loading\");\r\n                const response = yield __webpack_require__.g.realFetch(this.currentTunnel.replace(\"{channelname}\", this.channelName));\r\n                if (!response.ok) {\r\n                    throw new Error(\"server proxy return error or not found\");\r\n                }\r\n                const text = yield response.text();\r\n                __webpack_require__.g.LogPrint(\"External Server: OK\");\r\n                this.addStreamLink(text, _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                __webpack_require__.g.LogPrint(\"server proxy return error or not found \" + this.currentTunnel);\r\n                __webpack_require__.g.LogPrint(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    //add a new player stream local\r\n    streamAccess(stream) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (stream.name == _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name)\r\n                return yield this.externalPlayer();\r\n            try {\r\n                const query = 'query PlaybackAccessToken_Template($login: String!, $isLive: Boolean!, $vodID: ID!, $isVod: Boolean!, $playerType: String!) {  streamPlaybackAccessToken(channelName: $login, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isLive) {    value    signature    __typename  }  videoPlaybackAccessToken(id: $vodID, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isVod) {    value    signature    __typename  }}';\r\n                const body = {\r\n                    operationName: 'PlaybackAccessToken_Template',\r\n                    query: query,\r\n                    variables: {\r\n                        'isLive': true,\r\n                        'login': this.channelName,\r\n                        'isVod': false,\r\n                        'vodID': '',\r\n                        'playerType': stream.playerType\r\n                    }\r\n                };\r\n                const gql = yield __webpack_require__.g.realFetch(\"https://gql.twitch.tv/gql\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Client-ID\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\" },\r\n                    body: JSON.stringify(body)\r\n                });\r\n                const streamDataAccess = yield gql.json();\r\n                const url = \"https://usher.ttvnw.net/api/channel/hls/\" + this.channelName + \".m3u8?allow_source=true&fast_bread=true&p=\" + Math.floor(Math.random() * 1e7) +\r\n                    \"&player_backend=mediaplayer&playlist_include_framerate=true&reassignments_supported=false&sig=\" + streamDataAccess.data.streamPlaybackAccessToken.signature + \"&supported_codecs=avc1&token=\" + streamDataAccess.data.streamPlaybackAccessToken.value;\r\n                const text = yield (yield __webpack_require__.g.realFetch(url)).text();\r\n                __webpack_require__.g.LogPrint(\"Server loaded \" + stream.name);\r\n                this.addStreamLink(text, stream.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cmVhbS9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXJFLE1BQU0sT0FBTyxNQUFNO0lBUWYsWUFBWSxXQUFtQixFQUFFLFNBQWlCLEVBQUU7UUFQcEQsZUFBVSxHQUFtQixFQUFFLENBQUM7UUFDaEMsUUFBRyxHQUFRLElBQUksR0FBRyxFQUFFLENBQUM7UUFDckIsZ0JBQVcsR0FBVyxFQUFFLENBQUM7UUFFekIsV0FBTSxHQUFHLENBQUMsNkNBQTZDLEVBQUUsNkNBQTZDLENBQUMsQ0FBQTtRQUN2RyxrQkFBYSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUE0RXZDLHNCQUFpQixHQUFHLEdBQVMsRUFBRTtZQUMzQixJQUFJLENBQUMsQ0FBQSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0I7UUFDTCxDQUFDLENBQUEsQ0FBQTtRQTdFRyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLE1BQU07WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUM1QyxDQUFDO0lBRUQsb0RBQW9EO0lBQzlDLGFBQWEsQ0FBQyxJQUFZLEVBQUUsSUFBSSxHQUFHLE9BQU8sRUFBRSxHQUFHLEdBQUcsSUFBSTs7WUFDeEQsTUFBTSxlQUFlLEdBQWlCLEVBQUUsQ0FBQztZQUN6QyxJQUFJLFlBQW9DLENBQUM7WUFFekMsTUFB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\n\n/***/ }),\n\n/***/ \"./src/stream/type/stream.type.ts\":\n/*!****************************************!*\\\n  !*** ./src/stream/type/stream.type.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"streams\": () => (/* binding */ streams)\n/* harmony export */ });\nconst streams = {\r\n    picture: { playerType: \"thunderdome\", name: \"lower\" },\r\n    local: { playerType: \"embed\", name: \"normal\" },\r\n    external: { name: \"external\" }\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLnR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RyZWFtL3R5cGUvc3RyZWFtLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ25CLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNyRCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7SUFDOUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtDQUNqQyxDQUFBIn0=\n\n/***/ }),\n\n/***/ \"./src/stream/type/streamServer.types.ts\":\n/*!***********************************************!*\\\n  !*** ./src/stream/type/streamServer.types.ts ***!\n  \\***********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"qualityUrl\": () => (/* binding */ qualityUrl),\n/* harmony export */   \"streamServer\": () => (/* binding */ streamServer)\n/* harmony export */ });\nclass qualityUrl {\r\n    constructor() {\r\n        this.url = \"\";\r\n        this.quality = \"\";\r\n    }\r\n}\r\nclass streamServer {\r\n    constructor(partial) {\r\n        this.bestQuality = () => { return this.urlList[0]; };\r\n        this.findByQuality = (quality) => this.urlList.find(x => x.quality == quality);\r\n        Object.assign(this, partial);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtU2VydmVyLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cmVhbS90eXBlL3N0cmVhbVNlcnZlci50eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sVUFBVTtJQUF2QjtRQUNFLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFDakIsWUFBTyxHQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQUE7QUFDRCxNQUFNLE9BQU8sWUFBWTtJQVF2QixZQUFZLE9BQThCO1FBSDFDLGdCQUFXLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBO1FBQzlDLGtCQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUdoRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBQ0YifQ==\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n/*!***************************!*\\\n  !*** ./src/app.worker.ts ***!\n  \\***************************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _player_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player/player */ \"./src/player/player.ts\");\n\r\nfunction app() {\r\n    __webpack_require__.g.LogPrint = (x) => console.log(\"[Purple]: \", x);\r\n    __webpack_require__.g.addEventListener(\"message\", (e) => {\r\n        __webpack_require__.g.onEventMessage(e);\r\n    });\r\n    const player = new _player_player__WEBPACK_IMPORTED_MODULE_0__.Player();\r\n    __webpack_require__.g.realFetch = __webpack_require__.g.fetch;\r\n    __webpack_require__.g.player = player;\r\n    player.inflateFetch();\r\n    __webpack_require__.g.LogPrint(\"Script running\");\r\n}\r\napp();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAud29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVN6QyxNQUFNLENBQUMsT0FBTyxVQUFVLEdBQUc7SUFDekIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO1FBQzVDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUV2QixNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFDRCxHQUFHLEVBQUUsQ0FBQyJ9\n})();\n\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/app.worker.js */ "./dist/app.worker.js");
//this line gonna import the content from compile worker as string
//@ts-expect-error

(function () {
    let mainWorker;
    window.postMessage({ type: "init" });
    window.Worker = class WorkerInjector extends Worker {
        constructor(twitchBlobUrl) {
            console.log("new worker intance " + twitchBlobUrl);
            if (twitchBlobUrl == '')
                super(twitchBlobUrl);
            console.log("[Purple]: init " + twitchBlobUrl);
            const newBlobStr = `${_dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__}
      importScripts('${twitchBlobUrl}');`;
            super(URL.createObjectURL(new Blob([newBlobStr], { type: "text/javascript" })));
            mainWorker = this;
            mainWorker.declareEventWorker();
            mainWorker.declareEventWindow();
        }
        declareEventWorker() {
            this.addEventListener("message", (event) => {
                // if (typeof (event.data.type) !== "string") console.log(event.data.arg);
                // if (typeof (event.data.type) !== "string") console.log(event.data);
                switch (event.data.type) {
                    case "init": {
                        window.postMessage({ type: "getSetting", value: null, });
                        break;
                    }
                    case "PlayerQualityChanged": {
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.name });
                        break;
                    }
                    case "pause": {
                        mainWorker.postMessage({ funcName: "pause", args: undefined, id: 1 });
                        break;
                    }
                    case "play": {
                        mainWorker.postMessage({ funcName: "play", args: undefined, id: 1 });
                        break;
                    }
                    default: {
                        break;
                    }
                }
                if (!event.data.arg)
                    return;
                switch (event.data.arg.key) {
                    case "quality": {
                        if (!event.data.arg.value.name)
                            break;
                        console.log("Changed quality by player: " + event.data.arg.value.name);
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.value.name });
                        break;
                    }
                    case "state": {
                        mainWorker.postMessage({ funcName: event.data.arg.value });
                    }
                    default: {
                        break;
                    }
                }
                switch (event.data.arg.name) {
                    case "pause": {
                        break;
                    }
                    case "play": {
                        break;
                    }
                    default: {
                        break;
                    }
                }
            });
        }
        declareEventWindow() {
            //Event listener from window and extension.
            window.addEventListener("message", (event) => {
                switch (event.data.type) {
                    case "setSetting": {
                        //send settings to worker
                        mainWorker.postMessage({ funcName: "setSetting", value: event.data.value });
                    }
                }
            });
        }
    };
    // function videoPlayer() {
    //   try {
    //     var videoController = null;
    //     var videoPlayer = null;
    //     function findReactNode(root, constraint) {
    //       if (root.stateNode && constraint(root.stateNode)) {
    //         return root.stateNode;
    //       }
    //       let node = root.child;
    //       while (node) {
    //         const result = findReactNode(node, constraint);
    //         if (result) {
    //           return result;
    //         }
    //         node = node.sibling;
    //       }
    //       return null;
    //     }
    //     var reactRootNode = null;
    //     var rootNode = document.querySelector("#root");
    //     if (
    //       rootNode &&
    //       rootNode._reactRootContainer &&
    //       rootNode._reactRootContainer._internalRoot &&
    //       rootNode._reactRootContainer._internalRoot.current
    //     ) {
    //       reactRootNode = rootNode._reactRootContainer._internalRoot.current;
    //     }
    //     videoPlayer = findReactNode(reactRootNode, (node) => node.setPlayerActive && node.props && node.props.mediaPlayerInstance);
    //     videoPlayer =
    //       videoPlayer && videoPlayer.props && videoPlayer.props.mediaPlayerInstance ? videoPlayer.props.mediaPlayerInstance : null;
    //     window.videoPlayer = videoPlayer;
    //   } catch (e) {
    //     console.log(e);
    //   }
    // }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0VBQWtFO0FBQ2xFLGtCQUFrQjtBQUNsQixPQUFPLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQztBQUV4QyxDQUFDO0lBQ0MsSUFBSSxVQUFlLENBQUM7SUFFcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxjQUFlLFNBQVEsTUFBTTtRQUNqRCxZQUFZLGFBQWtCO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLENBQUE7WUFFbEQsSUFBSSxhQUFhLElBQUksRUFBRTtnQkFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7WUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsQ0FBQTtZQUU5QyxNQUFNLFVBQVUsR0FBRyxHQUFHLEdBQUc7dUJBQ1IsYUFBYSxLQUFLLENBQUM7WUFFcEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDbEIsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbEMsQ0FBQztRQUVELGtCQUFrQjtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pDLDBFQUEwRTtnQkFDMUUsc0VBQXNFO2dCQUV0RSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUN2QixLQUFL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
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7VUFBQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7OztBQ05BO0FBQ0E7QUFDd0M7QUFDeEM7QUFDQTtBQUNBLHlCQUF5QixjQUFjO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxnREFBRztBQUNyQyx1QkFBdUIsY0FBYyxHQUFHO0FBQ3hDLCtEQUErRCx5QkFBeUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsa0NBQWtDO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvREFBb0Q7QUFDckc7QUFDQTtBQUNBO0FBQ0EsaURBQWlELDJDQUEyQztBQUM1RjtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsMENBQTBDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELDBEQUEwRDtBQUMzRztBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0NBQWdDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGlEQUFpRDtBQUNsRztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQ0FBMkMsMmpJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy90aGlzIGxpbmUgZ29ubmEgaW1wb3J0IHRoZSBjb250ZW50IGZyb20gY29tcGlsZSB3b3JrZXIgYXMgc3RyaW5nXHJcbi8vQHRzLWV4cGVjdC1lcnJvclxyXG5pbXBvcnQgdHh0IGZyb20gXCIuLi9kaXN0L2FwcC53b3JrZXIuanNcIjtcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBtYWluV29ya2VyO1xyXG4gICAgd2luZG93LnBvc3RNZXNzYWdlKHsgdHlwZTogXCJpbml0XCIgfSk7XHJcbiAgICB3aW5kb3cuV29ya2VyID0gY2xhc3MgV29ya2VySW5qZWN0b3IgZXh0ZW5kcyBXb3JrZXIge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHR3aXRjaEJsb2JVcmwpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJuZXcgd29ya2VyIGludGFuY2UgXCIgKyB0d2l0Y2hCbG9iVXJsKTtcclxuICAgICAgICAgICAgaWYgKHR3aXRjaEJsb2JVcmwgPT0gJycpXHJcbiAgICAgICAgICAgICAgICBzdXBlcih0d2l0Y2hCbG9iVXJsKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbUHVycGxlXTogaW5pdCBcIiArIHR3aXRjaEJsb2JVcmwpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdCbG9iU3RyID0gYCR7dHh0fVxuICAgICAgaW1wb3J0U2NyaXB0cygnJHt0d2l0Y2hCbG9iVXJsfScpO2A7XHJcbiAgICAgICAgICAgIHN1cGVyKFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW25ld0Jsb2JTdHJdLCB7IHR5cGU6IFwidGV4dC9qYXZhc2NyaXB0XCIgfSkpKTtcclxuICAgICAgICAgICAgbWFpbldvcmtlciA9IHRoaXM7XHJcbiAgICAgICAgICAgIG1haW5Xb3JrZXIuZGVjbGFyZUV2ZW50V29ya2VyKCk7XHJcbiAgICAgICAgICAgIG1haW5Xb3JrZXIuZGVjbGFyZUV2ZW50V2luZG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlY2xhcmVFdmVudFdvcmtlcigpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGlmICh0eXBlb2YgKGV2ZW50LmRhdGEudHlwZSkgIT09IFwic3RyaW5nXCIpIGNvbnNvbGUubG9nKGV2ZW50LmRhdGEuYXJnKTtcclxuICAgICAgICAgICAgICAgIC8vIGlmICh0eXBlb2YgKGV2ZW50LmRhdGEudHlwZSkgIT09IFwic3RyaW5nXCIpIGNvbnNvbGUubG9nKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5pdFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiZ2V0U2V0dGluZ1wiLCB2YWx1ZTogbnVsbCwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGxheWVyUXVhbGl0eUNoYW5nZWRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV29ya2VyLnBvc3RNZXNzYWdlKHsgZnVuY05hbWU6IFwic2V0UXVhbGl0eVwiLCB2YWx1ZTogZXZlbnQuZGF0YS5hcmcubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwYXVzZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Xb3JrZXIucG9zdE1lc3NhZ2UoeyBmdW5jTmFtZTogXCJwYXVzZVwiLCBhcmdzOiB1bmRlZmluZWQsIGlkOiAxIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInBsYXlcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV29ya2VyLnBvc3RNZXNzYWdlKHsgZnVuY05hbWU6IFwicGxheVwiLCBhcmdzOiB1bmRlZmluZWQsIGlkOiAxIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmRhdGEuYXJnKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hcmcua2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInF1YWxpdHlcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmRhdGEuYXJnLnZhbHVlLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDaGFuZ2VkIHF1YWxpdHkgYnkgcGxheWVyOiBcIiArIGV2ZW50LmRhdGEuYXJnLnZhbHVlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV29ya2VyLnBvc3RNZXNzYWdlKHsgZnVuY05hbWU6IFwic2V0UXVhbGl0eVwiLCB2YWx1ZTogZXZlbnQuZGF0YS5hcmcudmFsdWUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdGF0ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Xb3JrZXIucG9zdE1lc3NhZ2UoeyBmdW5jTmFtZTogZXZlbnQuZGF0YS5hcmcudmFsdWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFyZy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInBhdXNlXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwbGF5XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVjbGFyZUV2ZW50V2luZG93KCkge1xyXG4gICAgICAgICAgICAvL0V2ZW50IGxpc3RlbmVyIGZyb20gd2luZG93IGFuZCBleHRlbnNpb24uXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNldFNldHRpbmdcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NlbmQgc2V0dGluZ3MgdG8gd29ya2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Xb3JrZXIucG9zdE1lc3NhZ2UoeyBmdW5jTmFtZTogXCJzZXRTZXR0aW5nXCIsIHZhbHVlOiBldmVudC5kYXRhLnZhbHVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGZ1bmN0aW9uIHZpZGVvUGxheWVyKCkge1xyXG4gICAgLy8gICB0cnkge1xyXG4gICAgLy8gICAgIHZhciB2aWRlb0NvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgLy8gICAgIHZhciB2aWRlb1BsYXllciA9IG51bGw7XHJcbiAgICAvLyAgICAgZnVuY3Rpb24gZmluZFJlYWN0Tm9kZShyb290LCBjb25zdHJhaW50KSB7XHJcbiAgICAvLyAgICAgICBpZiAocm9vdC5zdGF0ZU5vZGUgJiYgY29uc3RyYWludChyb290LnN0YXRlTm9kZSkpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHJvb3Quc3RhdGVOb2RlO1xyXG4gICAgLy8gICAgICAgfVxyXG4gICAgLy8gICAgICAgbGV0IG5vZGUgPSByb290LmNoaWxkO1xyXG4gICAgLy8gICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgIC8vICAgICAgICAgY29uc3QgcmVzdWx0ID0gZmluZFJlYWN0Tm9kZShub2RlLCBjb25zdHJhaW50KTtcclxuICAgIC8vICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgLy8gICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcclxuICAgIC8vICAgICAgIH1cclxuICAgIC8vICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICB2YXIgcmVhY3RSb290Tm9kZSA9IG51bGw7XHJcbiAgICAvLyAgICAgdmFyIHJvb3ROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyb290XCIpO1xyXG4gICAgLy8gICAgIGlmIChcclxuICAgIC8vICAgICAgIHJvb3ROb2RlICYmXHJcbiAgICAvLyAgICAgICByb290Tm9kZS5fcmVhY3RSb290Q29udGFpbmVyICYmXHJcbiAgICAvLyAgICAgICByb290Tm9kZS5fcmVhY3RSb290Q29udGFpbmVyLl9pbnRlcm5hbFJvb3QgJiZcclxuICAgIC8vICAgICAgIHJvb3ROb2RlLl9yZWFjdFJvb3RDb250YWluZXIuX2ludGVybmFsUm9vdC5jdXJyZW50XHJcbiAgICAvLyAgICAgKSB7XHJcbiAgICAvLyAgICAgICByZWFjdFJvb3ROb2RlID0gcm9vdE5vZGUuX3JlYWN0Um9vdENvbnRhaW5lci5faW50ZXJuYWxSb290LmN1cnJlbnQ7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIHZpZGVvUGxheWVyID0gZmluZFJlYWN0Tm9kZShyZWFjdFJvb3ROb2RlLCAobm9kZSkgPT4gbm9kZS5zZXRQbGF5ZXJBY3RpdmUgJiYgbm9kZS5wcm9wcyAmJiBub2RlLnByb3BzLm1lZGlhUGxheWVySW5zdGFuY2UpO1xyXG4gICAgLy8gICAgIHZpZGVvUGxheWVyID1cclxuICAgIC8vICAgICAgIHZpZGVvUGxheWVyICYmIHZpZGVvUGxheWVyLnByb3BzICYmIHZpZGVvUGxheWVyLnByb3BzLm1lZGlhUGxheWVySW5zdGFuY2UgPyB2aWRlb1BsYXllci5wcm9wcy5tZWRpYVBsYXllckluc3RhbmNlIDogbnVsbDtcclxuICAgIC8vICAgICB3aW5kb3cudmlkZW9QbGF5ZXIgPSB2aWRlb1BsYXllcjtcclxuICAgIC8vICAgfSBjYXRjaCAoZSkge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9XHJcbn0pKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNhMFZCUVd0Rk8wRkJRMnhGTEd0Q1FVRnJRanRCUVVOc1FpeFBRVUZQTEVkQlFVY3NUVUZCVFN4MVFrRkJkVUlzUTBGQlF6dEJRVVY0UXl4RFFVRkRPMGxCUTBNc1NVRkJTU3hWUVVGbExFTkJRVU03U1VGRmNFSXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUlhKRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4alFVRmxMRk5CUVZFc1RVRkJUVHRSUVVOcVJDeFpRVUZaTEdGQlFXdENPMWxCUXpWQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzWVVGQllTeERRVUZETEVOQlFVRTdXVUZGYkVRc1NVRkJTU3hoUVVGaExFbEJRVWtzUlVGQlJUdG5Ra0ZCUlN4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3V1VGRE4wTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4aFFVRmhMRU5CUVVNc1EwRkJRVHRaUVVVNVF5eE5RVUZOTEZWQlFWVXNSMEZCUnl4SFFVRkhMRWRCUVVjN2RVSkJRMUlzWVVGQllTeExRVUZMTEVOQlFVTTdXVUZGY0VNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoR0xGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdXVUZEYkVJc1ZVRkJWU3hEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNN1dVRkRhRU1zVlVGQlZTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03VVVGRGJFTXNRMEZCUXp0UlFVVkVMR3RDUVVGclFqdFpRVU5vUWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVU3WjBKQlEzcERMREJGUVVFd1JUdG5Ra0ZETVVVc2MwVkJRWE5GTzJkQ1FVVjBSU3hSUVVGUkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMjlDUVVOMlFpeExRVUZMTEUxQlFVMHNRMEZCUXl4RFFVRkRPM2RDUVVOWUxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1dVRkJXU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRPM2RDUVVONlJDeE5RVUZOTzNGQ1FVTlFPMjlDUVVORUxFdEJRVXNzYzBKQlFYTkNMRU5CUVVNc1EwRkJRenQzUWtGRE0wSXNWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeFpRVUZaTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN2QwSkJReTlGTEUxQlFVMDdjVUpCUTFBN2IwSkJRMFFzUzBGQlN5eFBRVUZQTEVOQlFVTXNRMEZCUXp0M1FrRkRXaXhWUVVGVkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8zZENRVU4wUlN4TlFVRk5PM0ZDUVVOUU8yOUNRVU5FTEV0QlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNN2QwSkJRMWdzVlVGQlZTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZOQlFWTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dDNRa0ZEY2tVc1RVRkJUVHR4UWtGRFVEdHZRa0ZEUkN4UFFVRlBMRU5CUVVNc1EwRkJRenQzUWtGRFVDeE5RVUZOTzNGQ1FVTlFPMmxDUVVOR08yZENRVVZFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWM3YjBKQlFVVXNUMEZCVHp0blFrRkROVUlzVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVU3YjBKQlF6RkNMRXRCUVVzc1UwRkJVeXhEUVVGRExFTkJRVU03ZDBKQlEyUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpPelJDUVVGRkxFMUJRVTA3ZDBKQlEzUkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zTmtKQlFUWkNMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8zZENRVU4yUlN4VlFVRlZMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzVVVGQlVTeEZRVUZGTEZsQlFWa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03ZDBKQlEzSkdMRTFCUVUwN2NVSkJRMUE3YjBKQlEwUXNTMEZCU3l4UFFVRlBMRU5CUVVNc1EwRkJRenQzUWtGRFdpeFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03Y1VKQlF6VkVPMjlDUVVORUxFOUJRVThzUTBGQlF5eERRVUZETzNkQ1FVTlFMRTFCUVUwN2NVSkJRMUE3YVVKQlEwWTdaMEpCUlVRc1VVRkJVU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVN2IwSkJRek5DTEV0QlFVc3NUMEZCVHl4RFFVRkRMRU5CUVVNN2QwSkJRMW9zVFVGQlRUdHhRa0ZEVUR0dlFrRkRSQ3hMUVVGTExFMUJRVTBzUTBGQlF5eERRVUZETzNkQ1FVTllMRTFCUVUwN2NVSkJRMUE3YjBKQlEwUXNUMEZCVHl4RFFVRkRMRU5CUVVNN2QwSkJRMUFzVFVGQlRUdHhRa0ZEVUR0cFFrRkRSanRaUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEwb3NRMEZCUXp0UlFVVkVMR3RDUVVGclFqdFpRVU5vUWl3eVEwRkJNa003V1VGRE0wTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRk8yZENRVU16UXl4UlFVRlJMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzI5Q1FVTjJRaXhMUVVGTExGbEJRVmtzUTBGQlF5eERRVUZETzNkQ1FVTnFRaXg1UWtGQmVVSTdkMEpCUTNwQ0xGVkJRVlVzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1dVRkJXU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03Y1VKQlF6ZEZPMmxDUVVOR08xbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEVEN4RFFVRkRPMHRCUTBZc1EwRkJRenRKUVVWR0xESkNRVUV5UWp0SlFVTXpRaXhWUVVGVk8wbEJRMVlzYTBOQlFXdERPMGxCUTJ4RExEaENRVUU0UWp0SlFVVTVRaXhwUkVGQmFVUTdTVUZEYWtRc05FUkJRVFJFTzBsQlF6VkVMR2xEUVVGcFF6dEpRVU5xUXl4VlFVRlZPMGxCUTFZc0swSkJRU3RDTzBsQlF5OUNMSFZDUVVGMVFqdEpRVU4yUWl3d1JFRkJNRVE3U1VGRE1VUXNkMEpCUVhkQ08wbEJRM2hDTERKQ1FVRXlRanRKUVVNelFpeFpRVUZaTzBsQlExb3NLMEpCUVN0Q08wbEJReTlDTEZWQlFWVTdTVUZEVml4eFFrRkJjVUk3U1VGRGNrSXNVVUZCVVR0SlFVVlNMR2REUVVGblF6dEpRVU5vUXl4elJFRkJjMFE3U1VGRGRFUXNWMEZCVnp0SlFVTllMRzlDUVVGdlFqdEpRVU53UWl4M1EwRkJkME03U1VGRGVFTXNjMFJCUVhORU8wbEJRM1JFTERKRVFVRXlSRHRKUVVNelJDeFZRVUZWTzBsQlExWXNORVZCUVRSRk8wbEJRelZGTEZGQlFWRTdTVUZEVWl4clNVRkJhMGs3U1VGRGJFa3NiMEpCUVc5Q08wbEJRM0JDTEd0SlFVRnJTVHRKUVVWc1NTeDNRMEZCZDBNN1NVRkRlRU1zYTBKQlFXdENPMGxCUTJ4Q0xITkNRVUZ6UWp0SlFVTjBRaXhOUVVGTk8wbEJRMDRzU1VGQlNUdEJRVU5PTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=