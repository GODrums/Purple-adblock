/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/app.worker.js":
/*!****************************!*\
  !*** ./dist/app.worker.js ***!
  \****************************/
/***/ ((module) => {

module.exports = "/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/hls/HLS.ts\":\n/*!************************!*\\\n  !*** ./src/hls/HLS.ts ***!\n  \\************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HLS\": () => (/* binding */ HLS)\n/* harmony export */ });\nclass HLS {\r\n    constructor() {\r\n        this._header = [\"#EXTM3U\", \"#EXT-X-VERSION:3\", \"#EXT-X-TARGETDURATION:6\", \"#EXT-X-MEDIA-SEQUENCE:\"];\r\n        this._playlist = [];\r\n        this._sequence = 0;\r\n    }\r\n    addPlaylistTest(playlist) {\r\n    }\r\n    addPlaylist(playlist, allowAds = false) {\r\n        if (playlist === null) {\r\n            return false;\r\n        }\r\n        let changed = false;\r\n        const lines = playlist.toString().split(/[\\r\\n]/);\r\n        this._header[4] = lines[4];\r\n        this._header[5] = lines[5];\r\n        //take all m3u9 content to the playlist and build a varible\r\n        for (const i in lines) {\r\n            if (lines[i].includes(\"#EXTINF\")) {\r\n                if (!allowAds) {\r\n                    if (!lines[i].includes(\",live\")) {\r\n                        continue;\r\n                    }\r\n                }\r\n                //timestamp sequence\r\n                const sequenceTimestamp = Math.floor(new Date(lines[parseInt(i) - 1].slice(lines[parseInt(i) - 1].length - 24, lines[parseInt(i) - 1].length)).getTime() / 1000);\r\n                //select all sequence that no exist\r\n                const r = this._playlist.filter((x) => {\r\n                    return x.timestamp >= sequenceTimestamp;\r\n                });\r\n                //add the sequence on playlist variable if it no exist\r\n                if (!r.length) {\r\n                    this._sequence = this._sequence + 1;\r\n                    this._playlist.push({\r\n                        time: lines[parseInt(i) - 1],\r\n                        timestamp: sequenceTimestamp,\r\n                        info: lines[parseInt(i)],\r\n                        url: lines[parseInt(i) + 1],\r\n                    });\r\n                    changed = true;\r\n                }\r\n                while (this._playlist.length > 15) {\r\n                    this._playlist.shift();\r\n                }\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    getPlaylist() {\r\n        let playlist = \"\";\r\n        this._playlist.forEach(x => playlist = playlist + x.time + \"\\n\" + x.info + \"\\n\" + x.url + \"\\n\");\r\n        return (this._header[0] +\r\n            \"\\n\" +\r\n            this._header[1] +\r\n            \"\\n\" +\r\n            this._header[2] +\r\n            \"\\n\" +\r\n            this._header[3] +\r\n            this._sequence +\r\n            \"\\n\" +\r\n            this._header[4] +\r\n            \"\\n\" +\r\n            this._header[5] +\r\n            \"\\n\" +\r\n            playlist);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSExTLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hscy9ITFMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLEdBQUc7SUFBaEI7UUFDVSxZQUFPLEdBQWtCLENBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFFLHlCQUF5QixFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDOUcsY0FBUyxHQUFtQixFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLENBQUMsQ0FBQztJQXdFeEIsQ0FBQztJQXRFQyxlQUFlLENBQUMsUUFBZ0I7SUFFaEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFnQixFQUFFLFdBQW9CLEtBQUs7UUFDckQsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFcEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQiwyREFBMkQ7UUFDM0QsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7WUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUMvQixTQUFTO3FCQUNWO2lCQUNGO2dCQUNELG9CQUFvQjtnQkFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBRWpLLG1DQUFtQztnQkFDbkMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsT0FBTyxDQUFDLENBQUMsU0FBUyxJQUFJLGlCQUFpQixDQUFDO2dCQUMxQyxDQUFDLENBQUMsQ0FBQztnQkFDSCxzREFBc0Q7Z0JBQ3RELElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO29CQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7b0JBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO3dCQUNsQixJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQzVCLFNBQVMsRUFBRSxpQkFBaUI7d0JBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4QixHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQzVCLENBQUMsQ0FBQztvQkFDSCxPQUFPLEdBQUcsSUFBSSxDQUFDO2lCQUNoQjtnQkFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDeEI7YUFDRjtTQUNGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLFFBQVEsR0FBVyxFQUFFLENBQUM7UUFFMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDL0YsT0FBTyxDQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSTtZQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSTtZQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSTtZQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLFNBQVM7WUFDZCxJQUFJO1lBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJO1lBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJO1lBQ0osUUFBUSxDQUNULENBQUM7SUFDSixDQUFDO0NBQ0YifQ==\n\n/***/ }),\n\n/***/ \"./src/player/message.ts\":\n/*!*******************************!*\\\n  !*** ./src/player/message.ts ***!\n  \\*******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlayerMessage\": () => (/* binding */ PlayerMessage)\n/* harmony export */ });\nclass PlayerMessage {\r\n    constructor() {\r\n        this.getQuality = () => __webpack_require__.g.postMessage({ type: \"getQuality\" });\r\n        this.init = () => __webpack_require__.g.postMessage({ type: \"init\" });\r\n        this.pause = () => __webpack_require__.g.postMessage({ type: \"pause\" });\r\n        this.play = () => __webpack_require__.g.postMessage({ type: \"play\" });\r\n        this.pauseAndPlay = () => {\r\n            this.pause();\r\n            this.play();\r\n        };\r\n        this.isLoaded = false;\r\n        this.quality = \"\";\r\n        __webpack_require__.g.onEventMessage = (e) => {\r\n            // var myMessage = new MessageEvent('worker', { data: 'hello' });\r\n            // if (global.onmessage) global.onmessage(this, myMessage);\r\n            switch (e.data.funcName) {\r\n                case \"Buffering\": {\r\n                    break;\r\n                }\r\n                case \"onClientSinkPlaying\": {\r\n                    break;\r\n                }\r\n                case \"onClientSinkUpdate\": {\r\n                    break;\r\n                }\r\n                case \"pause\": {\r\n                    break;\r\n                }\r\n                case \"play\": {\r\n                    break;\r\n                }\r\n                case \"Ready\": {\r\n                    break;\r\n                }\r\n                case \"Playing\": {\r\n                    break;\r\n                }\r\n                case \"setQuality\": {\r\n                    if (e.data.args)\r\n                        this.quality = e.data.args[0].name;\r\n                    if (e.data.value)\r\n                        this.quality = e.data.value;\r\n                    break;\r\n                }\r\n                case \"setSetting\": {\r\n                    this.setting = e.data.value;\r\n                    break;\r\n                }\r\n                default: {\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbGF5ZXIvbWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sYUFBYTtJQWdCdEI7UUFmQSxlQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzlELFNBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEQsVUFBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRCxTQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUE7UUFFRCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLFlBQU8sR0FBVyxFQUFFLENBQUM7UUFLakIsTUFBTSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQy9CLGlFQUFpRTtZQUVqRSwyREFBMkQ7WUFFM0QsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsS0FBSyxXQUFXLENBQUMsQ0FBQztvQkFDZCxNQUFNO2lCQUNUO2dCQUNELEtBQUsscUJBQXFCLENBQUMsQ0FBQztvQkFDeEIsTUFBTTtpQkFDVDtnQkFDRCxLQUFLLG9CQUFvQixDQUFDLENBQUM7b0JBQ3ZCLE1BQU07aUJBQ1Q7Z0JBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztvQkFDVixNQUFNO2lCQUNUO2dCQUNELEtBQUssTUFBTSxDQUFDLENBQUM7b0JBQ1QsTUFBTTtpQkFDVDtnQkFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO29CQUNWLE1BQU07aUJBQ1Q7Z0JBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztvQkFDWixNQUFNO2lCQUNUO2dCQUNELEtBQUssWUFBWSxDQUFDLENBQUM7b0JBQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7d0JBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3BELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO3dCQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQzlDLE1BQU07aUJBQ1Q7Z0JBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQztvQkFDZixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUM1QixNQUFNO2lCQUNUO2dCQUNELE9BQU8sQ0FBQyxDQUFDO29CQUNMLE1BQU07aUJBQ1Q7YUFDSjtRQUNMLENBQUMsQ0FBQTtJQUNMLENBQUM7Q0FDSiJ9\n\n/***/ }),\n\n/***/ \"./src/player/player.ts\":\n/*!******************************!*\\\n  !*** ./src/player/player.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _stream_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../stream/stream */ \"./src/stream/stream.ts\");\n/* harmony import */ var _stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stream/type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message */ \"./src/player/message.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.streamList = [];\r\n        this.actualChannel = \"\";\r\n        this.playingAds = false;\r\n        this.quality = \"\";\r\n        this.LogPrint = __webpack_require__.g.LogPrint;\r\n        this.message = new _message__WEBPACK_IMPORTED_MODULE_2__.PlayerMessage();\r\n        this.onStartAds = () => { };\r\n        this.onEndAds = () => { };\r\n        this.isAds = (x, allowChange = false) => {\r\n            // const ads = x.toString().includes(\"stitched-ad\") || x.toString().includes(\"twitch-client-ad\") || x.toString().includes(\"twitch-ad-quartile\");\r\n            const ads = x.toString().includes(\"stitched\");\r\n            if (!allowChange)\r\n                return ads;\r\n            if (this.playingAds != ads && ads)\r\n                this.onStartAds();\r\n            if (this.playingAds != ads && !ads)\r\n                this.onEndAds();\r\n            this.playingAds = ads;\r\n            return this.playingAds;\r\n        };\r\n        this.currentStream = (channel = this.actualChannel) => {\r\n            return this.streamList.find((x) => x.channelName === channel);\r\n        };\r\n        this.message.init();\r\n    }\r\n    onfetch(url, response) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentStream = yield this.currentStream();\r\n            currentStream.hls.addPlaylist(response);\r\n            if (!this.isAds(response, true))\r\n                return true;\r\n            try {\r\n                const local = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n                if (local)\r\n                    currentStream.hls.addPlaylist(local);\r\n                if (!local)\r\n                    currentStream.streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n                if (local)\r\n                    return true;\r\n                const picture = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.picture);\r\n                if (picture)\r\n                    currentStream.hls.addPlaylist(picture);\r\n                if (picture)\r\n                    return true;\r\n                const external = yield this.fetchm3u8ByStreamType(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external);\r\n                if (external)\r\n                    currentStream.hls.addPlaylist(external);\r\n                if (external)\r\n                    return true;\r\n                console.log(\"fail\");\r\n                //if not resolve return the 480p to the user.\r\n                currentStream.hls.addPlaylist(local, true);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        });\r\n    }\r\n    fetchm3u8ByStreamType(accessType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.LogPrint(\"Stream Type: \" + accessType.name);\r\n            //filter all server by type\r\n            const servers = this.currentStream().getStreamServerByStreamType(accessType);\r\n            if (!servers)\r\n                return \"\";\r\n            //filter all server url by quality or bestquality\r\n            var streamUrlList = servers.map(x => x.findByQuality(this.message.quality)).filter(x => x !== undefined);\r\n            if (!streamUrlList.length)\r\n                streamUrlList = servers.map(x => x.bestQuality());\r\n            //by the array order, try get m3u8 content and return if don't have ads.\r\n            for (const streamUrl of streamUrlList) {\r\n                const text = yield (yield __webpack_require__.g.realFetch(streamUrl === null || streamUrl === void 0 ? void 0 : streamUrl.url)).text();\r\n                if (this.isAds(text))\r\n                    continue;\r\n                return text;\r\n            }\r\n            return \"\";\r\n        });\r\n    }\r\n    onStartChannel(url, text) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const channelName = /hls\\/(.*).m3u8/gm.exec(url) || [];\r\n            let stream;\r\n            let existent = false;\r\n            let whitelist = [];\r\n            if (!channelName[1])\r\n                return false;\r\n            this.actualChannel = channelName[1];\r\n            this.LogPrint(\"Channel \" + channelName[1]);\r\n            if (!this.message.setting == undefined) {\r\n                if (!this.message.setting.whitelist == undefined) {\r\n                    whitelist = this.message.setting.whitelist;\r\n                }\r\n            }\r\n            if (whitelist.includes(channelName[1]))\r\n                return false;\r\n            if (!this.streamList.find((c) => c.channelName === channelName[1])) {\r\n                let proxyUrl = \"\";\r\n                if (this.message.setting)\r\n                    proxyUrl = this.message.setting.proxyUrl ? this.message.setting.proxyUrl : \"\";\r\n                this.streamList.push(new _stream_stream__WEBPACK_IMPORTED_MODULE_0__.Stream(channelName[1], proxyUrl));\r\n            }\r\n            else {\r\n                this.LogPrint(\"Exist: \" + channelName[1]);\r\n                existent = true;\r\n            }\r\n            stream = this.currentStream();\r\n            //--------------------------------------------//\r\n            //--------------------------------------------//\r\n            this.LogPrint(\"Local Server: Loading\");\r\n            yield stream.addStreamLink(text, \"local\", true);\r\n            this.LogPrint(\"Local Server: OK\");\r\n            stream.streamAccess(_stream_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.local);\r\n            if (existent)\r\n                return;\r\n            stream.tryExternalPlayer();\r\n            return;\r\n        });\r\n    }\r\n    inflateFetch() {\r\n        //eslint-disable-next-line no-this-assign\r\n        __webpack_require__.g.fetch = function (url, options) {\r\n            return __awaiter(this, arguments, void 0, function* () {\r\n                if (typeof url === \"string\") {\r\n                    if (url.endsWith(\"m3u8\") && url.includes(\"ttvnw.net\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                yield __webpack_require__.g.realFetch(url, options)\r\n                                    .then((response) => __awaiter(this, void 0, void 0, function* () { return (response.text()); }))\r\n                                    .then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    //send the flow stream to script valitor and classificator\r\n                                    yield __webpack_require__.g.player.onfetch(url, text);\r\n                                    var playlist = __webpack_require__.g.player.currentStream().hls.getPlaylist();\r\n                                    console.log(playlist);\r\n                                    resolve(new Response(playlist));\r\n                                }));\r\n                            }\r\n                            catch (_a) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"usher.ttvnw.net/api/channel/hls/\") && !url.includes(\"picture-by-picture\")) {\r\n                        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                const response = yield __webpack_require__.g.realFetch(url, options);\r\n                                if (!response.ok) {\r\n                                    resolve(response);\r\n                                    //this.LogPrint(\"channel offline\");\r\n                                }\r\n                                response.text().then((text) => __awaiter(this, void 0, void 0, function* () {\r\n                                    yield __webpack_require__.g.player.onStartChannel(url, text);\r\n                                    resolve(new Response(text));\r\n                                }));\r\n                            }\r\n                            catch (_b) {\r\n                                resolve(new Response());\r\n                            }\r\n                        }));\r\n                    }\r\n                    if (url.includes(\"picture-by-picture\")) {\r\n                        this.LogPrint(\"picture-by-picture\");\r\n                        return new Response();\r\n                    }\r\n                }\r\n                return __webpack_require__.g.realFetch.apply(this, arguments);\r\n            });\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,\n\n/***/ }),\n\n/***/ \"./src/stream/stream.ts\":\n/*!******************************!*\\\n  !*** ./src/stream/stream.ts ***!\n  \\******************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stream\": () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var _hls_HLS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hls/HLS */ \"./src/hls/HLS.ts\");\n/* harmony import */ var _type_stream_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type/stream.type */ \"./src/stream/type/stream.type.ts\");\n/* harmony import */ var _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type/streamServer.types */ \"./src/stream/type/streamServer.types.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Stream {\r\n    constructor(channelName, tunnel = \"\") {\r\n        this.serverList = [];\r\n        this.hls = new _hls_HLS__WEBPACK_IMPORTED_MODULE_0__.HLS();\r\n        this.channelName = \"\";\r\n        this.tunnel = [\"https://eu1.jupter.ga/channel/{channelname}\", \"https://eu2.jupter.ga/channel/{channelname}\"];\r\n        this.currentTunnel = this.tunnel[0];\r\n        this.getStreamServerByStreamType = (accessType) => this.serverList.filter((x) => x.type == accessType.name);\r\n        this.tryExternalPlayer = () => __awaiter(this, void 0, void 0, function* () {\r\n            if (!(yield this.streamAccess(_type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external))) {\r\n                this.externalPlayer(true);\r\n            }\r\n        });\r\n        this.channelName = channelName;\r\n        if (tunnel)\r\n            this.currentTunnel = tunnel;\r\n    }\r\n    //add m3u8 links with quality to the list of servers\r\n    addStreamLink(text, type = \"local\", sig = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const qualityUrlSplit = [];\r\n            let captureArray;\r\n            const REGEX = /NAME=\"((?:\\S+\\s+\\S+|\\S+))\",AUTO(?:^|\\S+\\s+)(?:^|\\S+\\s+)(https:\\/\\/video(\\S+).m3u8)/g;\r\n            while ((captureArray = REGEX.exec(text)) !== null) {\r\n                qualityUrlSplit.push({ quality: captureArray[1], url: captureArray[2] });\r\n            }\r\n            const streamList = new _type_streamServer_types__WEBPACK_IMPORTED_MODULE_2__.streamServer({ type: type, urlList: qualityUrlSplit, sig: sig });\r\n            this.serverList.push(streamList);\r\n            if (!sig) {\r\n                yield this.signature();\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    signature() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const REGEX = /video-weaver.(.*).hls.ttvnw.net\\/v1\\/playlist\\/(.*).m3u8$/gm;\r\n            yield new Promise((resolve) => {\r\n                this.serverList\r\n                    .filter((x) => x.sig == false)\r\n                    .forEach((x) => __awaiter(this, void 0, void 0, function* () {\r\n                    const match = REGEX.exec(x.urlList[0].url);\r\n                    if (match) {\r\n                        try {\r\n                            yield fetch(\"https://jupter.ga/hls/v2/sig/\" + match[2] + \"/\" + match[1]);\r\n                            x.sig = true;\r\n                            resolve(true);\r\n                        }\r\n                        catch (_a) {\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                })),\r\n                    resolve(false);\r\n            });\r\n        });\r\n    }\r\n    //add a new player stream external\r\n    externalPlayer(customIgnore = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (customIgnore)\r\n                this.currentTunnel = this.tunnel[0];\r\n            try {\r\n                __webpack_require__.g.LogPrint(\"External Server: Loading\");\r\n                const response = yield __webpack_require__.g.realFetch(this.currentTunnel.replace(\"{channelname}\", this.channelName));\r\n                if (!response.ok) {\r\n                    throw new Error(\"server proxy return error or not found\");\r\n                }\r\n                const text = yield response.text();\r\n                __webpack_require__.g.LogPrint(\"External Server: OK\");\r\n                this.addStreamLink(text, _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                __webpack_require__.g.LogPrint(\"server proxy return error or not found \" + this.currentTunnel);\r\n                __webpack_require__.g.LogPrint(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    //create a new stream access\r\n    streamAccess(stream) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (stream.name == _type_stream_type__WEBPACK_IMPORTED_MODULE_1__.streams.external.name)\r\n                return yield this.externalPlayer();\r\n            try {\r\n                const query = 'query PlaybackAccessToken_Template($login: String!, $isLive: Boolean!, $vodID: ID!, $isVod: Boolean!, $playerType: String!) {  streamPlaybackAccessToken(channelName: $login, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isLive) {    value    signature    __typename  }  videoPlaybackAccessToken(id: $vodID, params: {platform: \"web\", playerBackend: \"mediaplayer\", playerType: $playerType}) @include(if: $isVod) {    value    signature    __typename  }}';\r\n                const body = {\r\n                    operationName: 'PlaybackAccessToken_Template',\r\n                    query: query,\r\n                    variables: {\r\n                        'isLive': true,\r\n                        'login': this.channelName,\r\n                        'isVod': false,\r\n                        'vodID': '',\r\n                        'playerType': stream.playerType\r\n                    }\r\n                };\r\n                const gql = yield __webpack_require__.g.realFetch(\"https://gql.twitch.tv/gql\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Client-ID\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\" },\r\n                    body: JSON.stringify(body)\r\n                });\r\n                const streamDataAccess = yield gql.json();\r\n                const url = \"https://usher.ttvnw.net/api/channel/hls/\" + this.channelName + \".m3u8?allow_source=true&fast_bread=true&p=\" + Math.floor(Math.random() * 1e7) + \"&player_backend=mediaplayer&playlist_include_framerate=true&reassignments_supported=false&sig=\" + streamDataAccess.data.streamPlaybackAccessToken.signature + \"&supported_codecs=avc1&token=\" + streamDataAccess.data.streamPlaybackAccessToken.value;\r\n                const text = yield (yield __webpack_require__.g.realFetch(url)).text();\r\n                __webpack_require__.g.LogPrint(\"Server loaded \" + stream.name);\r\n                this.addStreamLink(text, stream.name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cmVhbS9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXJFLE1BQU0sT0FBTyxNQUFNO0lBVWYsWUFBWSxXQUFtQixFQUFFLFNBQWlCLEVBQUU7UUFUcEQsZUFBVSxHQUFtQixFQUFFLENBQUM7UUFDaEMsUUFBRyxHQUFRLElBQUksR0FBRyxFQUFFLENBQUM7UUFDckIsZ0JBQVcsR0FBVyxFQUFFLENBQUM7UUFFekIsV0FBTSxHQUFHLENBQUMsNkNBQTZDLEVBQUUsNkNBQTZDLENBQUMsQ0FBQTtRQUN2RyxrQkFBYSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkMsZ0NBQTJCLEdBQUcsQ0FBQyxVQUFzQixFQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBNEVuSSxzQkFBaUIsR0FBRyxHQUFTLEVBQUU7WUFDM0IsSUFBSSxDQUFDLENBQUEsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUFFO2dCQUM1QyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzdCO1FBQ0wsQ0FBQyxDQUFBLENBQUE7UUE3RUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxNQUFNO1lBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFD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\n\n/***/ }),\n\n/***/ \"./src/stream/type/stream.type.ts\":\n/*!****************************************!*\\\n  !*** ./src/stream/type/stream.type.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"streams\": () => (/* binding */ streams)\n/* harmony export */ });\nconst streams = {\r\n    picture: { playerType: \"thunderdome\", name: \"lower\" },\r\n    local: { playerType: \"embed\", name: \"normal\" },\r\n    external: { name: \"external\" }\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLnR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RyZWFtL3R5cGUvc3RyZWFtLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ25CLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNyRCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7SUFDOUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtDQUNqQyxDQUFBIn0=\n\n/***/ }),\n\n/***/ \"./src/stream/type/streamServer.types.ts\":\n/*!***********************************************!*\\\n  !*** ./src/stream/type/streamServer.types.ts ***!\n  \\***********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"qualityUrl\": () => (/* binding */ qualityUrl),\n/* harmony export */   \"streamServer\": () => (/* binding */ streamServer)\n/* harmony export */ });\nclass qualityUrl {\r\n    constructor() {\r\n        this.url = \"\";\r\n        this.quality = \"\";\r\n    }\r\n}\r\nclass streamServer {\r\n    constructor(partial) {\r\n        this.bestQuality = () => { return this.urlList[0]; };\r\n        this.findByQuality = (quality) => this.urlList.find(x => x.quality == quality);\r\n        Object.assign(this, partial);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtU2VydmVyLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cmVhbS90eXBlL3N0cmVhbVNlcnZlci50eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sVUFBVTtJQUF2QjtRQUNFLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFDakIsWUFBTyxHQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQUE7QUFDRCxNQUFNLE9BQU8sWUFBWTtJQVF2QixZQUFZLE9BQThCO1FBSDFDLGdCQUFXLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBO1FBQzlDLGtCQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUdoRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBQ0YifQ==\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n/*!***************************!*\\\n  !*** ./src/app.worker.ts ***!\n  \\***************************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _player_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player/player */ \"./src/player/player.ts\");\n\r\nfunction app() {\r\n    __webpack_require__.g.LogPrint = (x) => console.log(\"[Purple]: \", x);\r\n    __webpack_require__.g.addEventListener(\"message\", (e) => {\r\n        __webpack_require__.g.onEventMessage(e);\r\n    });\r\n    const player = new _player_player__WEBPACK_IMPORTED_MODULE_0__.Player();\r\n    __webpack_require__.g.realFetch = __webpack_require__.g.fetch;\r\n    __webpack_require__.g.player = player;\r\n    player.inflateFetch();\r\n    __webpack_require__.g.LogPrint(\"Script running\");\r\n}\r\napp();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAud29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVN6QyxNQUFNLENBQUMsT0FBTyxVQUFVLEdBQUc7SUFDekIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO1FBQzVDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUV2QixNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFDRCxHQUFHLEVBQUUsQ0FBQyJ9\n})();\n\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/app.worker.js */ "./dist/app.worker.js");
//this line gonna import the content from compile worker as string
//@ts-expect-error

(function () {
    let mainWorker;
    window.postMessage({ type: "init" });
    window.Worker = class WorkerInjector extends Worker {
        constructor(twitchBlobUrl) {
            console.log("new worker intance " + twitchBlobUrl);
            if (twitchBlobUrl == '')
                super(twitchBlobUrl);
            console.log("[Purple]: init " + twitchBlobUrl);
            const newBlobStr = `${_dist_app_worker_js__WEBPACK_IMPORTED_MODULE_0__}
      importScripts('${twitchBlobUrl}');`;
            super(URL.createObjectURL(new Blob([newBlobStr], { type: "text/javascript" })));
            mainWorker = this;
            mainWorker.declareEventWorker();
            mainWorker.declareEventWindow();
        }
        declareEventWorker() {
            this.addEventListener("message", (event) => {
                // if (typeof (event.data.type) !== "string") console.log(event.data.arg);
                // if (typeof (event.data.type) !== "string") console.log(event.data);
                switch (event.data.type) {
                    case "init": {
                        window.postMessage({ type: "getSetting", value: null, });
                        break;
                    }
                    case "PlayerQualityChanged": {
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.name });
                        break;
                    }
                    case "pause": {
                        mainWorker.postMessage({ funcName: "pause", args: undefined, id: 1 });
                        break;
                    }
                    case "play": {
                        mainWorker.postMessage({ funcName: "play", args: undefined, id: 1 });
                        break;
                    }
                    default: {
                        break;
                    }
                }
                if (!event.data.arg)
                    return;
                switch (event.data.arg.key) {
                    case "quality": {
                        if (!event.data.arg.value.name)
                            break;
                        console.log("Changed quality by player: " + event.data.arg.value.name);
                        mainWorker.postMessage({ funcName: "setQuality", value: event.data.arg.value.name });
                        break;
                    }
                    case "state": {
                        mainWorker.postMessage({ funcName: event.data.arg.value });
                    }
                    default: {
                        break;
                    }
                }
                switch (event.data.arg.name) {
                    case "pause": {
                        break;
                    }
                    case "play": {
                        break;
                    }
                    default: {
                        break;
                    }
                }
            });
        }
        declareEventWindow() {
            //Event listener from window and extension.
            window.addEventListener("message", (event) => {
                switch (event.data.type) {
                    case "setSetting": {
                        //send settings to worker
                        mainWorker.postMessage({ funcName: "setSetting", value: event.data.value });
                    }
                }
            });
        }
    };
    // function videoPlayer() {
    //   try {
    //     var videoController = null;
    //     var videoPlayer = null;
    //     function findReactNode(root, constraint) {
    //       if (root.stateNode && constraint(root.stateNode)) {
    //         return root.stateNode;
    //       }
    //       let node = root.child;
    //       while (node) {
    //         const result = findReactNode(node, constraint);
    //         if (result) {
    //           return result;
    //         }
    //         node = node.sibling;
    //       }
    //       return null;
    //     }
    //     var reactRootNode = null;
    //     var rootNode = document.querySelector("#root");
    //     if (
    //       rootNode &&
    //       rootNode._reactRootContainer &&
    //       rootNode._reactRootContainer._internalRoot &&
    //       rootNode._reactRootContainer._internalRoot.current
    //     ) {
    //       reactRootNode = rootNode._reactRootContainer._internalRoot.current;
    //     }
    //     videoPlayer = findReactNode(reactRootNode, (node) => node.setPlayerActive && node.props && node.props.mediaPlayerInstance);
    //     videoPlayer =
    //       videoPlayer && videoPlayer.props && videoPlayer.props.mediaPlayerInstance ? videoPlayer.props.mediaPlayerInstance : null;
    //     window.videoPlayer = videoPlayer;
    //   } catch (e) {
    //     console.log(e);
    //   }
    // }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0VBQWtFO0FBQ2xFLGtCQUFrQjtBQUNsQixPQUFPLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQztBQUV4QyxDQUFDO0lBQ0MsSUFBSSxVQUFlLENBQUM7SUFFcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxjQUFlLFNBQVEsTUFBTTtRQUNqRCxZQUFZLGFBQWtCO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLENBQUE7WUFFbEQsSUFBSSxhQUFhLElBQUksRUFBRTtnQkFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7WUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsQ0FBQTtZQUU5QyxNQUFNLFVBQVUsR0FBRyxHQUFHLEdBQUc7dUJBQ1IsYUFBYSxLQUFLLENBQUM7WUFFcEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDbEIsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbEMsQ0FBQztRQUVELGtCQUFrQjtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pDLDBFQUEwRTtnQkFDMUUsc0VBQXNFO2dCQUV0RSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUN2QixLQUFL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
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,